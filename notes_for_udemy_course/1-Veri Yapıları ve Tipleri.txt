PYTHON
*!* print('hello world')
Parantezden sonra (kendi kapatýr parantezi) ya çift ya tek týrnak koy.

MARKDOWN/BAÞLIK
note: hello world program    yazýp çalýþtýr.

Untitled'a basarsan isimlendirebilirsin.
File'dan kaydedebilirsin (SAVE AS, MAKE A COPY, !SAVE AND CHECKPOINT!)
Bilgisayarda ismiyle aratabilirsin.

Bug olursa kernel, interrupt, restart adýmlarýný takip et.

In kýsmýna herhangi bir matematiksel iþlem yazarsan (5+6, 900/7, 5-2, 2*2 gibi) shift+enter ile sonucu görebilirsin.
2**3=2üzeri3 
2 * 2 = 2*2 diðerleri için de geçerli.
121%2 = 121'in 2'ye bölümünden kalan
integer--->tam sayý
float--->küsüratlý sayý
0,4 deðil 0.4

22/7 --> 3.14...
22//7 --> 3
YA DA
a=int(22/7)
a --> 3

Print dediðimizde yazdýðýmýz metinler->string
Numaralar->integer
         ->float

print("mert","gürþimþir") --> mert gürþimþir

DEÐÝÞKENLER (VARIABLES)
|||||||||||||||||||||||
IN x=3   ->S+E
IN y=4   ->S+E
IN x*y   ->S+E
   12

Tekrar in yerine x= herhangi bir deðer yazýp x deðerini deðiþtirebilirsin.


complex(a,b) ---> a+bj
1 + 4 + 0j  --->(5+0j)


Tanýmladýðýmýz bir deðiþkeni del komutuyla bellekten silebiliriz.
x=1
del x
print(x) ---> Error

del liste[2]----> listeden de silebiliriz
del d["isim"]----> sözlükten de silebiliriz

*!* r=input('r: ') ---> bu komut sana ''r: '' yazdýrýp boþluk verir. Bu boþluða sen r için bir deðer yazarsýn.

can't multiply sequence by non-int of type 'float' HATASI 
Nedir?: Örneðin yukarýda bahsettiðim gibi r için bir deðer girdin. Ardýndan r ile iþlem yapmaya çalýþýrsan r*2*3.14 gibi bu hatayý alýrsýn. 
        Buradaki hata r için girdiðin sayýyý python'un integer olarak görmemesi.
*!* type(x) bu komut sana x'in ne olduðunu söyler. 
r yazýp S+E yaparsan r'ye verdiðin deðeri görürsün ama yanlarýnda týrnak iþaretleri olur.
r'ye verdiðin deðer integer olarak görülmez string(str) olarak görülür.
*Týrnak içinde olmasý metin olduðu anlamýna gelir.

Nasýl çözülür?: r'den integer oluþturmak istiyorsan yeni bir deðiþken oluþturursun. 
                Örneðin r_int dedik (herhangi bir þey de diyebilirsin).
                r_int = int(r)
                type(r_int) dersen int olduðunu görürsün.
                Direkt r_int S+E yaparsan r için girdiðin deðeri verir.
                Yani girdiðin r=r_int oldu
               

*ÖNEMLÝ: Baþkasýnýn notebook dosyasýný açýnca hiçbir hücre çalýþýr durumda deðildir. Bu yüzden açýnca üstten Cell-Run Cells adýmlarý takip edilir.


*Float ve integerlar str ye çevrilebilir. Ayný adýmlar, sadece int(r) yerine str(r) yazýyorsun.


STRINGS
|||||||
In yerine print yazmadan sadece týrnak açýp metin girerek de string oluþturabilirsin.
Çift týrnak kullanmak daha iyidir. Çünkü metinde kesme iþareti kullanabilirsin ("i'm mert" gibi).

Bir deðiþkene string de atayabilirsin.
Örneðin: x="hello world" gibi.
Bundan sonra In yerine x yazýp S+E yaparsan sana girdiðin metni verir.

1- x'i önce str tanýmlayýp sonra int tanýmlayabilirsin.
2- x'i önce str tanýmlayýp sonra yine baþka bir str tanýmlayabilirsin.
3- x'i önce int tanýmlayýp sonra yine baþka bir int tanýmlayabilirsin.
4- x'i önce int tanýmlayýp sonra str tanýmlayabilirsin.

*Baþka diller 1 ve 4'e izin vermez.

*!* len(x) komutu sana x için girdiðin stringin karakter miktarýný gösterir. Boþluklar dahil.

*Deðiþkenlerde týrnaða gerek yoktur. 
print(x) diyebilirsin. Sana out olarak x için tanýmladýðýn stringi verir (týrnak iþaretleri olmadan verir). Sadece x yazýp S+E yaparsan týrnak iþaretli verir.

ESCAPE CHARACTERS: hello 
                   world  þeklinde bir satýr aþaðýya yazmak istiyorsan bu adýmlarý takip etmelisin.
print("hello \nworld")

print("hello \tworld") yazarsan hello ve world kelimeleri arasýna boþluk býrakýlýr (bir tab kadar).

'Ahmet\'in dersi var' --> "Ahmet'in dersi var"

*INDEXING: my_string="hello world" dedin stringini belirledin.
           my_string[0] dersen ilk harfi gösterir.     
           Indexler 0'dan baþlar.
           Stringinin son harfini görmek istersen my_string[-1] yazabilirsin.
           Stringinin sondan 2. harfini görmek istersen my_string[-2] yazabilirsin.
           Yani - sondan baþlatýr.

SLICING
my_string_2="1234567890" yazdýn. Bu bir int olmaz. Çünkü týrnak iþaretleri var.
my_string_2[2:] yazarsan 34567890 görürsün. Bu komut 2. indexten baþlat demektir. (3 ve sonrasý)(ilk 2 elemaný yoksay)
my_string_2[:2] yazarsan 12 görürsün. Bu komut ilk 2 indexi göster demektir. Ýlk 2 index derken 0 ve 1. olanlar kastediliyor. Yani yazdýðýmýz 2 stopping index demektir. (3'ten öncesi)(ilk 2 elemaný al)
my_string_2[2:4] yazarsan 34 görürsün. Bu komut ilk 2 elemaný yoksayýp kalanýný al ve ayný zamanda ilk 4 elemaný al demektir. Yani ortak olarak 3 ve 4 alýnýr. (ikinciden baþla dördüncüde dur)
my_string_2[5:8] yazarsan 678 görürsün.

# ile baþladýðýn satýrý kod olarak okumaz, yorum olarak okur.

STEP SIZE
my_string_2[::] dersen direkt 1234567890 yazýlýr.
my_string_2[::3] dersen 1470 görürsün. Bu komut ilk indexi al ve üçer üçer git demektir.
my_string_2[2:4:2] dersen 3 görürsün. 
Çünkü-> 34567890 alacak, ayný zamanda 1234 alacak, ayný zamanda ikiþer gidecek, bu yüzden 3.
my_string_2[::-1] dersen 0987654321 görürsün. Bu komut tersten baþla ve birer birer git demektir.
BU KOMUTTA ÝLK 2 SAYIYA (2:2:2  komutunda 2:2 e bakmak gibi) GÖRE ÝÞLEM YAPILDIKTAN SONRA KALAN SAYILAR ÜZERÝNDEN KAÇAR GÝDÝLECEÐÝNE BAKILIR. ORTAK SAYILAR ALINMAZ.

***STRING VARSA "" VARDIR! STRINGTE PARANTEZ ÖNEMLÝ DEÐÝLDÝR. 

x=2
y=1
x,y=y,x
x-->1 oldu
y-->2 oldu

a="thank"
b="you"
a+b S+E --> 'thankyou'


MARKDOWN'DAYKEN --> ## string methods   yazarsan string methods kalýn ve büyük yazýlýr.

Herhangi bir deðiþkeni in kýsmýna yazdýktan sonra shift+tab yaparsan deðiþkenin açýklamasýný görürsün.



my_name="mert"
my_name. yazýp tab'a basarsan my_name ile ilgili özellikler verir.
Herhangi bir özelliði seçip yanýna parantez koyarsan [()-> açýk ve kapalý] o özelliði uygular (anlýk).
Bunu kalýcý yapmak istersen seçtiðin özellik metnine bir deðiþken tanýmlaman gerekir.
Örneðin: my_name_capitalized=my_name.capitalize()
         my_name_capitalized=Mert olmuþ olur.



my_name="mert gürþimþir"

my_name.split()
['mert', 'gürþimþir']

ms=my_name.split()

ms[0]
'mert'


HERHANGÝ BÝR ÖZELLÝÐÝN HANGÝ ANLAMA GELDÝÐÝNÝ NASIL BULABÝLÝRÝM?
Örneðin my_name yazdýn ve özellik olarak capitalize'ý seçtin.
        my_name.capitalize yazýp shift+tab yaparsan sana özelliðin ne anlama geldiðini gösterir.


"james" * 10 ---S+E---> 'jamesjamesjamesjamesjamesjamesjamesjamesjamesjames'

"james" + 5 ---S+E---> HATA
"james" + "5" ---S+E---> 'james5'

my_name="mert"
my_surname="gürþimþir"
my_full_name = my_name + my_surname 
my_full_name ---S+E---> 'mertgürþimþir'
my_full_name = my_name + " " + my_surname l
my_full_name ---S+E---> 'mert gürþimþir'


LISTS
|||||
immutability:deðiþmezlik
x="mert"
x[0]="g" ---s+e---> diyemezsin

*code yerinde baþa # koyup yazarsan yorum satýrý olarak algýlanýr ve kodda çalýþtýrýlmaz.

mutability:deðiþebilirlik
my_list=[1,2,3]
my_list[0] --s+e--> 1
my_list[0]=5
my_list --s+e--> [5,2,3]
my_list[1]="mert"
my_list --s+e--> [5, 'mert', 3]

my_list. yazýp tab yaptýn sana yine özellikler verir.
my_list.append(7)
my_list --s+e--> [5, 'mert', 3, 7]

*Stringte . tab yapýp özellik belirleyince ana string bundan etkilenmiyordu ama listelerde ana list etkileniyor.
 

my_list.pop() --s+e--> 7    Bu hem son elemaný çýkartýr hem de output verir.
my_list --s+e--> [5, 'mert', 3]

mix=[1,2,3,"a","lfksdl"]
mix --s+e--> [1, 2, 3, 'a', 'lfksdl']
mix[-1] --s+e--> 'lfksdl'
print(mix[-1])  --s+e--> lfksdl

bir=["a","b","c"]
iki=["d","e","f"]
üç=bir+iki
üç  --s+e--> ['a', 'b', 'c', 'd', 'e', 'f']
bir*3 --s+e--> ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']
bir.reverse()
bir --s+e--> ['c', 'b', 'a']

*Örneðin my_list1, my_list2 gibi birçok liste atadýn; my yazýp tab'e basarsan sana hýzlý yazman bazý öneriler verir.
Bir tane my_list varsa my yazýp tab'e basarsan my_list yazar.

Nested List:iç içe geçmiþ liste
*nested sadece listelerle kullanýlmýyor.

new_list = [1,4,"a",[3,"c"]] --->Liste içine yeni liste koyduk.
new_list[3]  --s+e--> [3, 'c']
nested_list=new_list[3] 
nested_list --s+e--> [3, 'c']
nested_list[1] --s+e--> 'c'
new_list[3][1] --s+e--> 'c'
a=new_list[1]
a  --s+e--> 4
new_list[2:]  --s+e--> ['a', [3, 'c']]
new_list[:2]  --s+e--> [1, 4]


DICTIONARY
||||||||||
my_dictionary={"key":"value"}
my_dictionary["key"] --s+e--> 'value'

my_list=[100,200]
my_list_2=["run","swim"]
my_list[0] --s+e--> 100
my_list_2[0] --s+e--> 'run'
Yani burada koþmanýn 100 kalori deðerinde olduðunu göstermiþ olduk ama bunu dictionary ile daha kolay yapabiliriz.

my_fitness_dictionary={"run":100, "swim":200}
my_fitness_dictionary["run"] --s+e--> 100
my_fitness_dictionary["swim"] --s+e--> 200

my_dictionary_2 = {"key1":1,"key2":2,"key3":"apple"}  -----> string de tanýmlayabilirsin
my_dictionary_2["key3"] --s+e--> 'apple'

my_dictionary_3={"key1":10,20:30}
my_dictionary_3[20] --s+e--> 30
Yani 'key'lerin string olmasý gerekmiyor.

my_dictionary_4={"key1":100,"key2":[10,20,30],"key3":{"a":5}}
x=my_dictionary_4["key2"]
x[1] --s+e--> 20
my_dictionary_4["key2"][1]  --s+e--> 20

my_dictionary_4. tab
my_dictionary_4.keys() --s+e--> dict_keys(['key1', 'key2', 'key3'])
my_dictionary_4.values() --s+e--> dict_values([100, [10, 20, 30], {'a': 5}])

my_dictionary_4["key3"]["a"] --s+e--> 5

my_dictionary_5={"k1":1,"k2":2}
my_dictionary_5["k1"]=3
my_dictionary_5  --s+e--> {'k1': 3, 'k2': 2}
my_dictionary_5["k3"]=7
my_dictionary_5  --s+e--> {'k1': 3, 'k2': 2, 'k3': 7}

a'nýn yanýna aþaðýdaki 2 yolla herhangi bir þey ekleyebilirsin:
1)my_dictionary_6 = {"key":"a"}
  my_dictionary_6["key"]=["a","b"]
  my_dictionary_6 --s+e--> {'key': ['a', 'b']}
2)my_dictionary_6 = {"key":["a"]}
  my_dictionary_6["key"].append("b")
  my_dictionary_6 --s+e--> {'key': ['a', 'b']}

***Key olarak yalnýzca deðiþtirilemez tipler (sayý, string, tuple) kullanýlýr. Listeler kullanýlamaz.

SET
|||
Listede ayný elemandan 2 tane olabilir (örn: [1,2,3,1]) ama setlerde olamaz.

Casting: list=[1,2,3,1]
         my_set=set(list)
         my_set ---s+e---> {1, 2, 3}
         my_set_2={1,2,3,1} 
         my_set_2 ---s+e---> {1, 2, 3}
         my_set_3={"a","b","a"}
         my_set_3={"a","b","a"} ---s+e---> {'a', 'b'}


BOÞ SET, BOÞ LÝSTE, BOÞ DICTIONARY
||||||||||||||||||||
my_list=[]
type(my_list) ---s+e---> list
my_list.append(1)
my_list ---s+e---> [1]

my_list_10=list()
type(my_list_10) ---s+e---> list
my_list_10.append("a")
my_list_10.append(2)
my_list_10.append([1,2])
my_list_10

my_set_4={}
type(my_set_4) ---s+e---> dict     (dictionary sandý)
my_set_5=set()
my_set_5 ---s+e---> set()
my_set_5.add(1) 
my_set_5.add(2)
my_set_5 ---s+e---> {1,2}
my_set_5.add(2)
my_set_5 ---s+e---> {1,2}
type(my_set_5) ---s+e---> set

my_dict_2=dict()
my_dict_2["key1"]=1
my_dict_2 ---s+e---> {'key1 : 1}

TUPLE
|||||
my_list=["a",1,"c"]
my_list[0]="b"
my_list ---s+e---> ['b', 1, 'c']
YANÝ LÝSTELERDE DEÐÝÞTÝREBÝLÝYORUZ AMA TUPLELARDA DEÐÝÞTÝREMÝYORUZ.

(IMMUTABILITY)
my_tuple=("a",1,"c")
my_tuple[0] ---s+e---> 'a'
my_tuple[0] = "b" ---s+e---> HATA

my_tuple.count("a") ---s+e---> 1  'a'larý saydý
my_tuple.index("a") ---s+e---> 0  'a'nýn kaçýncý index olduðunu gösterdi

my_tuple_2=(1,1,1)
my_tuple_2.index(1) ---s+e---> 0   1'i ilk nerede bulduysa onun indexini verir

(x, y, z) = (-1.25, 42, "Merhaba")   -----> Bu     x, y, z = -1.25, 42, "Merhaba"    þeklinde de yazýlabilir.
x--->-1.25 
.
.
.


BOOLEAN
|||||||
Doðru veya yanlýþ cevabýný veren operatördür.
Bilgisayara eðer þu doðruysa bunu yap (dosya varsa, dosyanýn olmasý true'ysa bu iþlemleri yap; eðer ip adresi buysa bu iþlemleri yap; bu sayý bundan büyükse bu iþlemleri yap) vs. diyebiliriz.

my_boolean=True
True ---s+e---> True
False ---s+e---> False 

5>3 ---s+e---> True
3>5 ---s+e---> False

x=5
y= input("y:")  ---s+e---> y:6
y_int=int(y)
y_int>x ---s+e---> True

If kontrollerini öðrenince "Bu bundan büyükse bunu yap." gibi þeyler yapabiliriz.

[] = {} = "" = None = 0 = 0.0 = False
Tersine olarak da, sýfýrdan farklý her sayý veya boþ olmayan herhangi bir liste/çokuz/dize/sözlük if yapýlarýnda mantýksal doðru olarak yorumlanýrlar.


Boole ifadelerinde ikiden fazla bileþen de kullanýlabilir. Önce not iþlemi, sonra and iþlemi, sonra da or iþlemi yapýlýr. Ayni iþlem yapýlýyorsa, bileþenler soldan saða çifter çifter alýnýr.
1 == 2 or 3 > 4 or 5 < 8
True
