CLASS
|||||

Class deðiþkenleri, fonksiyonlarý, döngüleri içinde barýndýran en büyük mimari yapý.

my_list=list() -------> Liste sýnýfýndan my_list objesi oluþturduk.

my_list -----> Liste sýnýfýnýn instance'ý

ATTRIBUTE ---> my_list. yazýp tab'e basýnca my_list'te oluþturduðumuz instance'ýn (objemizin) özelliklerine ve methodlarýna ulaþabiliyoruz.
               Attribute bu özelliklerdir. 
               my_list'in attributelarý


Yazýlým þekilleri:
__________________
snake case--> my_string
camel case--> myString
.
.
.
Sýnýf yazarken camel case kullanýrýz.
Sadece sýnýf yazarken büyük harfle baþlarýz.

Sýnýftan bir instance, yeni bir obje oluþturduðumuzda ilk çaðýrýlan fonksiyon init fonksiyonudur.
init---initialize---baþlatmak
Bu fonksiyonun içerisine attributelar (objenin almasýný istediðin özellikler) yazýlýr.
Böylece bir kiþi senin sýnýfýndan bir instance oluþtururken bu özellikleri verir.
Instance'a bu özellikler assign edilir (eþitlenir).

self--> Oluþturduðun instance'a referans verir.
        Ýleride Musician sýnýfýndan oluþturulacak herhangi bir objeye referans verir. 
        self. dediðimizde instance'a referans veririz.

*****INSTANCE YARATIRKEN INIT ÝÇÝNDE KULLANDIÐIN TANIMLARI BELÝRTMEN GEREKÝR!!!

class Musician():
    job="musician"   #bu satýr gerekli deðil--hepsinin ortak özelliði-kapsayan küme
    def __init__(self,name,age):      #sadece self mecbur        
        self.name_attribute=name              
        self.age_attribute=age

my_musician=Musician() ---> HATA. Ýsim ve yaþ vermen gerekli.

my_musician=Musician("James",50)

my_musician. yazýp tab'e basarsan age ve name gelir. 
Bu özellikleri öðrenebilirsin.

my_musician.age_attribute ---s+e---> 50

my_musician.name_attribute ---s+e---> 'James'

my_musician.name_attribute="Lars"

my_musician.name_attribute ---s+e---> 'Lars'


Sadece attribute eklemek için deðil o sýnýftan bir obje oluþturulduðunda baþka bir þey olsun istiyorsan (print etmek olsun, baþka bir fonksiyonu çaðýrmak olsun aklýna ne gelirse) __init__ i kullanabilirsin. attribute'ler için de ayný þekilde kullanabilirsin.

my_musician.job ---s+e---> 'musician'

my_musician.job="singer"

my_musician.job ---s+e---> 'singer'



ÞU ÞEKÝLDE DE YAPABÝLÝRSÝN
class Musician():
    def attri(self,age,name):
        self.yaþ=age
        self.isim=name

a=Musician()

a.attri(19,"Mert")

a.isim
|
'Mert'

a.yaþ
|
19



METHOD: Class içindeki fonksiyon.

class Musician():
    job="musician"
    def __init__(self,name,age):
        self.name_attribute=name
        self.age_attribute=age
    #method
    def sing(self):
        print("We are the champions!")

my_musician=Musician("James", 50, "Guitar")
my_musician.sing() ---s+e---> We are the champions!


***self instance ile baðlantýyý kuran kelimedir.


class Musician():
    job="musician"
    def __init__(self,name,age):
        self.name_attribute=name
        self.age_attribute=age
    #method
    def sing(self):
        print(f"We are the champions! {age}")
        
my_musician.sing() ---s+e---> HATA! age tanýmlý deðil der.

class Musician():
    job="musician"
    def __init__(self,name,age):
        self.name_attribute=name
        self.age_attribute=age
    #method
    def sing(self):
        print(f"We are the champions! {self.age_attribute}")

my_musician.sing() ---s+e--->  We are the champions! 50

SINIF ÝÇERÝSÝNDE NE  ZAMAN BÝR INSTANCE'A REFERANS VERMEK ÝSTERSEN 'SELF' KELÝMESÝNÝ KULLANIRSIN.



class DogYears():
    year_factor=7
    def __init__(self, age):
        self.age=age
        
    def calculation(self):
        return self.age*self.year_factor      ***self.year_factor yerine ->DogYears.year_factor 
                                              de kullanýlabilir. Çünkü year_factor her self için
                                              (yani instance için) deðiþen bir þey deðil.
                                              Direkt sýnýf altýnda tanýmlý deðiþken.

my_dog=DogYears(3)

my_dog.calculation() ---s+e---> 21



DogYears(3)'teki 3'ü vermeden nasýl çalýþtýrýrýz?
_________________________________________________
class DogYears():
    year_factor=7
    def __init__(self, age=5):
        self.age=age
        
    def calculation(self):
        return self.age*self.year_factor
    
my_dog=DogYears()

my_dog.calculation() ---s+e---> 35


Ýllaki kullanýcýdan bir deðer almana gerek yok. Örneðin;

class DogYears():
    year_factor=7
    def __init__(self, age=5):
        self.age=age
        self.name="Bar"
        
    def calculation(self):
        return self.age*self.year_factor

my_dog.name ---s+e---> 'Bar'

Bu sýnýftaki oluþturduðum her instance'ýn isminin bar olmasýný istiyorsam:

class DogYears():
    year_factor=7
    name="Bar"	
    def __init__(self, age=5):
        self.age=age
        
    def calculation(self):
        return self.age*self.year_factor
    
yaparým.
    
class DogYears():
    year_factor=7
    name="Bar"
    def __init__(self, age=5):
        self.age=age
        self.age_multiplied=age*7
        
    def calculation(self):
        return self.age*self.year_factor

my_dog.age_multiplied ---s+e---> 35   BÖYLE DE YAPILABÝLÝR.


***init fonksiyonu altýnda oluþturduðun her attribute bir þekilde oluþturulacaktýr.


INHERITANCE
|||||||||||
*init, sýnýfý kullanarak bir instance oluþturduðunda ilk çaðýrýlan method, fonksiyon.

class Class1():
    def __init__(self):
        print("Class 1 created")
    def method_1(self):
        print("method 1")
    def method_2(self):
        print("method 2")

my_instance=Class1() ---s+e---> Class 1 created

my_instance.method_1() ---s+e---> method 1

my_instance.method_2() ---s+e---> method 2



class Class2(Class1):
    def __init__(self):
        Class1.__init__(self)         #BUNU YAZMASAYDIN SADECE "Class 1 created" YAZMAZDI.
        print("Class 2 created")
    def method_3(self):
        print("method 3")

my_instance_2=Class2() ---s+e---> Class 1 created
                                  Class 2 created

my_instance_2.method_1() ---s+e---> method 1

my_instance_2.method_2() ---s+e---> method 2

my_instance_2.method_3() ---s+e---> method 3

Class2, Class1'deki iþlemleri miras aldý.


Class Class2(Class1):
    def __init__(self):
        Class1.__init__(self)
        print("Class 2 created")
    def method_3(self):
        print("method 3")
    #override
    def method_1(self):
        print("method 1 override")

my_instance_2.method_1() ---s+e---> method 1 override

my_instance.method_1() ---s+e---> method 1



POLYMORPHISM
------------
Farklý sýnýflarda ayný method bile olsa farklý sýnýflarýn instanceýnda onu o sýnýfa ait method gibi çalýþtýrabilmemiz.

class Apple():
    def __init__(self, name):
        self.name=name      
    def information(self):
        return self.name + " 100 calories"


class Banana():
    def __init__(self,name):
        self.name=name
    def information(self):
        return self.name + " 200 calories"


banana=Banana("banana")


apple=Apple("apple")


banana.information()
|
'banana 200 calories'


apple.information()
|
'apple 100 calories'


fruit_list=[banana,apple]


for fruit in fruit_list:
    print(fruit.information())
|
banana 200 calories
apple 100 calories


def get_info(fruit):
    print(fruit.information())
get_info(banana)
get_info(apple)
|
banana 200 calories
apple 100 calories



