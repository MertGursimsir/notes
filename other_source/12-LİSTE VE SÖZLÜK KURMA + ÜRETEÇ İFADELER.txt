Liste kurma, genel olarak bir üreteç ifadesi örneðidir.

[ <ifade> for <deðiþken> in <sýralý nesne> ]

Bu yapýda, <sýralý nesne>‘deki deðerler tek tek <deðiþken>‘e atanýr, ve <ifade>‘nin deðeri hesaplanarak listeye eklenir.

[c+"*" for c in "merhaba"]
|
['m*', 'e*', 'r*', 'h*', 'a*', 'b*', 'a*']


[ x[0] + x[1] for x in [(1,2), (2,-1), (4,2), (3,7)] ]
|
[3, 1, 6, 10]


[ x+y for x,y in [(1,2), (2,-1), (4,2), (3,7)] ]
|
[3, 1, 6, 10]


def kare(x): return x*x
[kare(x) for x in range(1,11)]
|
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]


def topla(a,b): return a+b
[topla(x,y) for x,y in [(1,2), (2,-1), (4,2), (3,7)] ]
|
[3, 1, 6, 10]

Liste kurma ifadelerinin döngülerden bir farký da, döngü deðiþkeninin kalýcý olmamasýdýr.

[i*i for i in range(10)]
|
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

i
|
HATA


LÝSTE KURMA ÝÞLEMÝ DÖNGÜDEN DAHA HIZLI ÇALIÞIR VE AYRICA DAHA SADEDÝR.
Hýz farkýnýn sebepleri:   

- Python gibi yorumlanan dillerde döngülerin nispeten yavaþ çalýþmasýdýr (C gibi derlenen dillere göre). Bir liste kurma ifadesi yine de örtük bir döngü içeriyor elbette, ama bu döngü alt seviyededir ve Python yorumlayýcýsý tarafýndan yüksek hýzda iþletilir.

- Her iterasyonda listenin append() metodunun çaðýrýlmasý gereðidir – fonksiyon çaðrýlarý uzun zaman alan iþlemlerdir ve programý yavaþlatýrlar.


ÞARTLI LÝSTE
------------
[<ifade> for <deðiþken> in <sýralý nesne> if <þart>]


[x*x for x in [1,3,5,7,9,11] if x>5 ]
|
[49, 81, 121]


[x*x if x>5 else 0 for x in [1,3,5,7,9,11] ]
Out[16]:
[0, 0, 0, 49, 81, 121]


***Bir yýl 4’e bölünebiliyorsa artýk yýldýr; 100’e bölünen ama 400’e bölünemeyen yýllar hariç. Yani 1600 ve 2000 yýllarý artýk yýl iken, 1700, 1800, 1900, 2100 yýllarý artýk deðildir.***

[ y for y in range(1900, 2101) if (y%4 == 0 and y%100 != 0) or y%400 == 0 ]
|
[1904,
 1908,
 ...
 2096]


ÝÇ ÝÇE DÖNGÜLERLE LÝSTE KURMA
-----------------------------
liste = []
for c in "abcd":
    for b in [1,2,3]:
        liste.append((c,b))
liste
|
[('a', 1),
 ('a', 2),
 ('a', 3),
 ('b', 1),
 ('b', 2),
 ('b', 3),
 ('c', 1),
 ('c', 2),
 ('c', 3),
 ('d', 1),
 ('d', 2),
 ('d', 3)]


[(c,b) for b in (1,2,3) for c in "abcd"]
|
[('a', 1),
 ('b', 1),
 ('c', 1),
 ('d', 1),
 ('a', 2),
 ('b', 2),
 ('c', 2),
 ('d', 2),
 ('a', 3),
 ('b', 3),
 ('c', 3),
 ('d', 3)]


[(a,b,a+b) for b in (1,2,3) for a in (4,5,6)]
|
[(4, 1, 5),
 (5, 1, 6),
 (6, 1, 7),
 (4, 2, 6),
 (5, 2, 7),
 (6, 2, 8),
 (4, 3, 7),
 (5, 3, 8),
 (6, 3, 9)]


[(a,b,c,a+b+c) for c in (1,2) for b in (3,4) for a in (5,6,7)]
|
[(5, 3, 1, 9),
 (6, 3, 1, 10),
 (7, 3, 1, 11),
 (5, 4, 1, 10),
 (6, 4, 1, 11),
 (7, 4, 1, 12),
 (5, 3, 2, 10),
 (6, 3, 2, 11),
 (7, 3, 2, 12),
 (5, 4, 2, 11),
 (6, 4, 2, 12),
 (7, 4, 2, 13)]


Her for ile beraber bir þart ekleyebiliriz.

[(a,b,a+b) for a in (1,2,3,4) if a>2 for b in (5,6,7)]
|
[(3, 5, 8), (3, 6, 9), (3, 7, 10), (4, 5, 9), (4, 6, 10), (4, 7, 11)]


[(a,b,a+b) for a in (1,2,3,4) if a>2 for b in (5,6,7) if b<7]
|
[(3, 5, 8), (3, 6, 9), (4, 5, 9), (4, 6, 10)]


a+b+c==10 þartýný saðlayan bütün üçlüleri bulalým. Tekrarlardan kaçýnmak için b>=a ve c>=b þartlarýný da koyalým.

[ (a,b,c) for a in range(1,10) for b in range(a, 10) for c in range(b,10) if a+b+c==10 ]
|
[(1, 1, 8),
 (1, 2, 7),
 (1, 3, 6),
 (1, 4, 5),
 (2, 2, 6),
 (2, 3, 5),
 (2, 4, 4),
 (3, 3, 4)]





[ <ifade> for <deðiþken_1> in <sýralý_1> if <þart_1>
for <deðiþken_2> in <sýralý_2> if <þart_2>
...
for <deðiþken_N> in <sýralý_N> if <þart_N> ]


=


liste = []
for <deðiþken_1> in <sýralý_1>:
    if <þart_1>:
        for <deðiþken_2> in <sýralý_2>:
            if <þart_2>:
            ....
                      for <deðiþken_N> in <sýralý_N>:
                          if <þart_N>:
                              liste.append(<ifade>)


LÝSTELER LÝSTESÝ
----------------
ÖNCE SONDAKÝ FOR ÇALIÞIR

[ [a+b for a in "abc"] for b in "xyz"]
|
[['ax', 'bx', 'cx'], ['ay', 'by', 'cy'], ['az', 'bz', 'cz']]


[ [3*sütun + satýr for satýr in [1,2,3] ] for sütun in [0,1,2] ]
|
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]


[ [ 1 if satýr==sütun else 0 for sütun in range(5)] for satýr in range(5)]
|
[[1, 0, 0, 0, 0],
 [0, 1, 0, 0, 0],
 [0, 0, 1, 0, 0],
 [0, 0, 0, 1, 0],
 [0, 0, 0, 0, 1]]


ÜRETEÇ ÝFADELER
---------------
Yukarýda gördüðümüz liste kurma yapýsý, aslýnda daha genel ve daha verimli olan üreteç ifadeleri nin (generator expressions) özel bir durumudur. Ýlk örneðimizi, bir üreteç olarak þöyle yazabiliriz:

(x*x for x in [1,2,3,4,5])
|
<generator object <genexpr> at 0x7f26157b7a98>



list(x*x for x in [1,2,3,4,5])      #Liste kurma ifadesiyle birebir ayný sonucu verir.
|
[1, 4, 9, 16, 25]


Üreteçler, sýralý nesneler gibi iterasyonlarda kullanýlabilirler. Önemli bir farklarý vardýr: Bütün elemanlarý bir seferde yaratýlýp bellekte saklanmaz. Bunun yerine, her eleman sýrasý geldikçe üretilir. Üreteç en son kaldýðý yeri aklýnda tutar.

g = (x*x for x in [1,2,3,4,5])
next(g), next(g), next(g)
|
(1, 4, 9)


a=list(g)
a
|
[16,25]       ----> Normalde [1, 4, 9, 16, 25] olurdu.

b=list(g)
b
|
[]



g=(x*x for x in [1,2,3,4,5])
for i in g:
    print(i)
|
1
4
9
16
25



Üreteçler listelere göre daha az yer kaplar. Bir listede bütün elemanlar baþtan sonra üretilip bellekte saklanýrken, bir üreteçte her eleman sadece ihtiyaç duyulduðu anda (söz geliþi, döngüde sýrasý geldiði zaman) dinamik olarak üretilirler. Özellikle çok elemanlý dizilerde bu önemli miktarda bellek tasarrufu saðlayabilir.


Üreteç ifadeleri, dizili nesne alan fonksiyonlara parametre olarak verilebilir:

sum(1/(x*x) for x in range(1,1001))
|
1.6439345666815615

=

a=[1/(x*x) for x in range(1,1001)]
toplam=0
for item in a:
    toplam+=item
toplam
|
1.6439345666815615



def çarpým(L):
    """Liste elemanlarýnýn çarpýmýný döndürür."""
    p = 1
    for x in L:
        p *= x
    return p
çarpým(x+2 for x in range(1,6))
|
2520



SET KURMA
---------
{i for i in range(10) if i%3 > 0}
|
{1, 2, 4, 5, 7, 8}


TUPLE KURMA
-----------
tuple( (i,i**2, i**3) for i in range(10) )
|
((0, 0, 0),
 (1, 1, 1),
 (2, 4, 8),
 (3, 9, 27),
 (4, 16, 64),
 (5, 25, 125),
 (6, 36, 216),
 (7, 49, 343),
 (8, 64, 512),
 (9, 81, 729))


DICTIONARY KURMA
----------------
{k:v for k,v in (("a",1),("b",2),("c",6))}
|
{'a': 1, 'b': 2, 'c': 6}


anahtarlar = ("a","b","c")
deðerler = (1,2,3)
{k:v for k,v in zip(anahtarlar,deðerler)}
|
{'a': 1, 'b': 2, 'c': 3}


d = {'a': 1, 'b': 2, 'c': 3}
{k*2:v*v for k,v in d.items()}
|
{'aa': 1, 'bb': 4, 'cc': 9}


Bu yöntemle bir sözlüðün anahtar ve deðerlerini ters çevirmek çok kolaydýr:

{v:k for k,v in d.items()}
|
{1: 'a', 2: 'b', 3: 'c'}

***NOT: zip ikili tuple lar halinde paketler. dict.items() de aynýsýný yapar ve listeye çevirir.

Bu son örnekte, iki ayrý anahtarda ayný deðer varsa, sonra gelenin öncekini sileceðine dikkat edin.

d = {'a': 1, 'b': 2, 'c': 3, 'd':2}
{v:k for k,v in d.items()}
|
{1: 'a', 2: 'd', 3: 'c'}