Her programlama dilinde olduðu gibi Python’da da tekrar tekrar kullanýlabilen fonksiyon ve sýnýflarýn bir kütüphane þeklinde ayrý dosyalarda saklanmasý ve yeni yazýlan programlara entegre edilmesi için bir mekanizma vardýr. Standart kütüphaneler, SciPy ve benzeri paketler, veya kendi kiþisel fonksiyon kütüphaneniz bu modül sistemiyle inþa edilir.

MODÜLLER
--------
Python kodu içeren, .py uzantýlý herhangi bir dosya bir modül olabilir. Sözgeliþi, aþaðýdaki kodu basitmodul.py isimli bir dosyaya yazýp kaydettiðinizde, bir modül yaratmýþ olursunuz.


%%writefile basitmodul.py
print("basitmodul çalýþtýrýldý.")
x = 5
def f(x):
    return x**2
def g():
    print("Merhaba")
|
Writing basitmodul.py


Ýsterseniz %%writefile ... satýrýndan sonraki kýsmý koyalayýp bir metin editörüne yapýþtýrarak basitmodul.py adýyla kaydedebilirsiniz.


import basitmodul
|
basitmodul çalýþtýrýldý.


Elbette basitmodul.py dosyasýný nereye kaydettiðiniz önemli. Bu örnekte, dosyanýn mevcut çalýþma dizininde bulunduðunu varsaydým. Bir import komutunda yorumlayýcý önce çalýþma dizinine, sonra PYTHONPATH kabuk deðiþkeninde yazan dizinlere, sonra da kurulum sýrasýnda belirlenmiþ dizinlere bakar. Ýkincisini Linux bash kabuðunda echo $PYTHONPATH komutu ile görebilirsiniz.

Diyelim yazdýðýnýz modülleri modullerim isimli bir dizin altýnda tutmak istiyorsunuz. Python yorumlayýcýsý içindeki sys.path deðiþkeni bakýlacak dizinlerin listesini tutar (önce import sys yazmayý unutmayýn). Bu listeye sys.path.append("<ev dizininiz>/modullerim") komutuyla bir ekleme yaparak, ev dizininizin altýndaki modullerim dizinine bakmasýný saðlayabilirsiniz.

Modülü import etmekle yeni bir isim alaný yaratmýþ oldunuz. Bir isim alaný bir nesnedir; dolayýsýyla modülde tanýmlanan deðiþken ve fonksiyonlara eriþmek için nokta notasyonu kullanýlýr.


basitmodul.x, basitmodul.f(5)
|
(5, 25)

basitmodul.g()
|
Merhaba

from basitmodul import x,f
x, f(2)
|
(5, 4)

g()
|
HATA


"from ... import ..." komutu tavsiye edilmez. Çünkü çatýþmalar olur, tanýmladýðýn bir ismin yerine geçebilir. basitmodul.f() daha emniyetlidir.


Þu þekilde kýsaltmalar kullanabilirsin:

import basitmodul as bm
bm.x, bm.f(3)
|
(5, 9)


from basitmodul import g as selamlama
selamlama()
|
Merhaba


dir(bm)
|
['__builtins__',
 '__cached__',
 '__doc__',
 '__file__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'f',
 'g',
 'x']





Modülleri Tekrar Yüklemek
-------------------------
Bir import iþlemi bir modül dosyasýný baþtan sona bir kere iþletir, ama ikinci bir import komutu dosyayý baþtan çalýþtýrmaz. Dolayýsýyla, etkileþimli çalýþýrken (sözgeliþi Spyder gibi bir IDE ile veya Jupyter defteri ile) modül dosyasýnda bir deðiþiklik yaptýysanýz, tekrar import yapmak bu deðiþikliklerin görülmesini saðlamaz.


%%writefile basitmodul.py
print("basitmodul çalýþtýrýldý.")
x = 5
def f(x):
    return x**2
def g():
    print("Namaste")
|
Overwriting basitmodul.py


import basitmodul
basitmodul.g()
|
Merhaba


Görüldüðü gibi g()‘nin eski tanýmýný kullanýyor. Zaten baþta "basitmodul çalýþtýrýldý" mesajýnýn çýkmamasý da modülün iþletilmediðine iþaret ediyor.


Modülünüzün güncellenmiþ olarak yeniden iþletilmesini istiyorsanýz ya Python yorumlayýcýnýzý kapatýp açmalýsýnýz (Jupyter’de kernel restart), ya da importlib.reload() fonksiyonunu kullanmalýsýnýz. Bu fonksiyon bir modül nesnesi döndürür.


from importlib import reload
bm = reload(basitmodul)
|
basitmodul çalýþtýrýldý.


***Direkt importlib'i importlayýp importlib.reload(basitmodul) komutunu kullanabilirsin. Bu basitmodul'ün son halini importlar. Sonra yine basitmodul.g() þeklinde kullanabilirsin.


bm.g()
|
Namaste



Tabii bir modül aslýnda dinamik bir nesne olduðu için, böyle bir deðiþiklik yapmak için her zaman dosyayý deðiþtirip tekrar yüklemek gerekmez; çalýþma sýrasýnda bir komutla da deðiþiklik yapýlabilir.


bm.g = lambda: print("Guten Tag")
bm.g()
|
Guten Tag




PAKETLER
--------
Bir modül belli bir iþe dair fonksiyonlarýn ve sýnýflarýn tanýmlandýðý bir dosyadýr. Ýþlev olarak iliþkili, ama birbirinden ayrý birkaç modülünüz varsa bunlarý ortak bir dizinde tutmak mantýklý olur. Bunlar bir Python paketi oluþturur.

Python’da bir paket bir dizindir; bu dizinde modüller ve __init__.py isimli bir dosya mevcut olmalýdýr. Paket yüklenirken __init__.py dosyasýnýn içindeki komutlar çalýþtýrýlýr. Paket yüklemesinde ilk olarak yapýlmasýný istediðimiz iþlemleri bu dosyaya koyabiliriz. Paket dizininde mutlaka __init__.py isimli bir dosya bulunmalýdýr; bu boþ bir dosya olabilir.