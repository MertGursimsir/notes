Python’da tanýmladýðýnýz her þey bir nesnedir. Nesneler özel veri yapýlarýdýr; içlerinde verilerin yaný sýra, o verilerle yapýlabilecek iþlemleri tanýmlayan fonksiyonlar barýndýrýrlar.

Söz geliþi, bir liste nesnesinin içinde elemanlarýn deðerleri, elemanlarýn ne tipte olduðu, kaç eleman bulunduðu gibi veriler bulunur. Ayrýca listeye eleman ekleme, eleman çýkarma, sýralama gibi iþlemler yapan fonksiyonlar da listeyi tanýmlayan kodun içindedir. Veri tipinin (sýnýfýn) tanýmý içinde bulunan fonksiyonlara o nesnenin metodlarý denir.


Herhangi bir veri tipi içinde tanýmlanmýþ isimleri (veri veya metod) dir fonksiyonuyla görebilirsiniz.

dir(list)
|
['__add__',
 '__class__',
 '__contains__',
 '__delattr__',
 '__delitem__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__getitem__',
 '__gt__',
 '__hash__',
 '__iadd__',
 '__imul__',
 '__init__',
 '__init_subclass__',
 '__iter__',
 '__le__',
 '__len__',
 '__lt__',
 '__mul__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__reversed__',
 '__rmul__',
 '__setattr__',
 '__setitem__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 'append',
 'clear',
 'copy',
 'count',
 'extend',
 'index',
 'insert',
 'pop',
 'remove',
 'reverse',
 'sort']

Burada altçizgilerle baþlayýp biten isimler list sýnýfýnýn (class) özel metodlarýdýr. Nesne içi kullaným içindir. Bunlar kullanýcý tarafýndan doðrudan çaðrýlmamalýdýr. Bu tür özel metodlarýn bazýlarý, asil metodlar için yardýmcý iþlemler olabilir. Bazýlarý ise in, +, *, <, == vs. gibi iþlemlerin tanýmlanmasýnda kullanýlýr. Söz geliþi, iki listenin eþit olup olmadýðýný anlamak için L1 == L2 ifadesini kullandýðýmýzda bu L1.__eq__(L2) biçimine getirilir.


L = [1,5,1,6,4]  
L2 = L.copy()
L2
|
[1, 5, 1, 6, 4]


L3=L[:]
L3
|
[1, 5, 1, 6, 4]





L1 = [1, "abc", 3]
L2 = ["xyz", 5]
L1.extend(L2)
L1
|
[1, 'abc', 3, 'xyz', 5]


L1 = [1, "abc", 3]
L2 = ["xyz", 5]
L1.append(L2)
L1
|
[1, 'abc', 3, ['xyz', 5]]



Listelerde toplama (+) iþlemi ve artýrma (+=) iþlemi arka planda extend ile yapýlýr.
L1 = [1, "abc", 3]
L2 = ["xyz", 5]
L1 += L2
L1
|
[1, 'abc', 3, 'xyz', 5]




L = [12, "abc", -4, 11, "abc", 0.25, 64]
L.index("abc")
|
1


L = [12, "abc", -4, 11, "abc", 0.25, 64]
yer = L.index("abc")
L.index("abc",yer+1)
|
4


L=['m', 'fr', 3, 4, 5, 6, 7, 4, 6, 3, 57, 3, 45]
a=[i for i,el in enumerate(L) if el==3]
a
|
[2, 9, 11]




L = [1, 2, "abc", -45]
L.insert(3, "xyz")            # Þimdi L[3] "xyz" oldu, -45 kaydý.
L
|
[1, 2, 'abc', 'xyz', -45]



L.insert(0, -10)              # en baþa sokar.
L
|
[-10, 1, 2, 'abc', 'xyz', -45]



L.insert(len(L), [3,1,4])     # en sona sokar. L.append([3,1,4]) ile ayný
L
|
[-10, 1, 2, 'abc', 'xyz', -45, [3, 1, 4]]






L = [1,2,"abc",4,5,"xyz"]
L.pop()
|
'xyz'


L
|
[1, 2, 'abc', 4, 5]


L.pop(2)
|
'abc'


L
|
[1, 2, 4, 5]






L = [2,1,5,2,"abc",1,"abc",1]
L.remove("abc")
L
|
[2, 1, 5, 2, 1, 'abc', 1]



--------------------------------------------------------------------------------------------


L = [3, 1, 4, 1, 5, 9]
L.reverse()
L
|
[9, 5, 1, 4, 1, 3]





L = [-4, -8, 1, 2, 1, 5, 9, 7]
L.sort()
L
|
[-8, -4, 1, 1, 2, 5, 7, 9]



L = [-4, -8, 1, 2, 1, 5, 9, 7]
L.sort(reverse=True)
L
|
[9, 7, 5, 2, 1, 1, -4, -8]




L = [-4, -8, 1, 2, 1, 5, 9, 7]
L.sort(key=abs)
L
|
[1, 1, 2, -4, 5, 7, -8, 9]



a=[1,2,3,4,5,6,7,8]
a.sort(key=lambda y:y-3 if y>4 else y)
a
|
[1, 2, 5, 3, 6, 4, 7, 8]



*!* sorted(a) yaparsan liste deðiþmez


sort ve reverse listeyi deðiþtirdi. Bunlar gibi metodlar, baðlý olduklarý listenin verisini doðrudan doðruya deðiþtirirler. Buna nesne içi !!!(in place)!!! deðiþtirme denir. Geriye döndürdükleri bir deðer yoktur.

L = [1,4,2,5]
print(L.sort())
|
None




L2 = L.sort()  ----> L2'yi None deðerine atarsýn. L2=sorted(L) olmalýydý.






