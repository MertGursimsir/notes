Linux terminale ifconfig komutunu yazýnca eth0 çýkar. Bu internete kablolu olarak baðlanýyoruz demektir. MAC adresimiz þu an sanal bir cihaza tanýmlý. eth0 fiziksel bir arayüz deðil.

Sanal cihazýn MAC adresini deðiþtirmenin bir mantýðý yok.

MAC adresini deðiþtirince Kali'deki internet baðlantýn sanal cihazýn MAC adresini deðiþtirdiðimiz için gider.

eth0 kabloyla baðlýymýþ gibi internet alýyor ama aslýnda nat network'ten alýyor. Örneðin gerçek bir usb wifi card'ýmýz olsaydý onda deðiþtirseydik problem olmazdý. Yine ana bilgisayarda deðiþtirseydik de problem olmazdý.

Normal bilgisayarda da mac deðiþtirirsen kalýcý olmaz. Aslýnda mac adresi üretici tarafýndan atanan bir hardware adresi. Zaten deðiþtirmeye de çoðu zaman ihtiyaç duymazsýn ancak að içi bir pentesting durumu varsa.

ADIMLAR
-------
ifconfig eth0 down

ifconfig eth0 hw ether 00:11:22:33:44:55   ----> eth0 arayüzünü bul, hardware'de deðiþiklik yap (fiziksel olarak cihazda deðiþiklik yapýlacak)

ifconfig eth0 up


ÝLK MAC ADRESÝNE GERÝ ALMA
--------------------------
service network-manager restart
VEYA
Kali'yi baþtan açmalýsýn.


PYCHARM ÜZERÝNDE DEÐÝÞTÝRMEK
----------------------------
DOSYA ADI:my_mac_changer

import subprocess
print("MyMacChangerStarted!")
subprocess.call(["ifconfig","eth0","down"])
subprocess.call(["ifconfig", "eth0","hw","ether","12:22:33:22:44:55"])
subprocess.call(["ifconfig","eth0","up"])

eth0 ve mac adresini kullanýcýdan isteyebilirsin.
Belki kullanýcýnýn farklý bir arayüzü var: kablosuz að baðlantýsý, wifi kartý vs. O yüzden eth0 kullanmak zorunda deðil.

***MAC ADRESÝNÝN ÝLK KISMI ÇÝFT SAYI OLMALI!!!


Bu tarz programlar çalýþýrken direkt komut satýrýnda (terminalde) da direkt input alabilirler:

ifconfig --help
   help fonksiyonunu çalýþtýrýr. 
   -- komutuyla bazý þeyleri içeri alabilirsin.


YENÝ GÝRDÝ ALMAK
----------------
****subprocess -> kod içerisinde, terminalde (veya command prompt'ta) komut çalýþtýrýr gibi bilgisayarýmýza komut vermeye yarýyor. örneðin ls komutunu açýp terminalde çalýþtýrýr gibi kod içerisinde çalýþtýrabiliyorum.
****optparse -> terminal içinde kullanýcýdan input almaya yarýyor.
****scapy.all -> að içinde paketleri okumamýza, yazmamýza yardýmcý olan bir kütüphane


import subprocess
import optparse
parse_object=optparse.OptionParser()

parse_object.add_option("-i", "--interface", dest="interface", help="interface to change") 
                          |__________|              |                     |       
                               |                    |                     |
                      kullanýcý interface'i         |       Bütün programlarda kullanýlýr.
                      ne yazarak versin             |       "my_mac_changer//help" yazýlýnca
                                                    |       ne kullanýlacaðýný yazarsýn.
                                                    |
                                                    |
                                        input'u nereye kaydedeceðiz
                                            (aþaðýdaki deðiþken)
                                 (Öyle deðiþken olmasa da yeni oluþturup kaydeder.)

parse_object.add_option("-m", "--mac", dest="mac_address", help="new mac address")

   #option_dictionary=parse_object.parse_args()
   #print(option_dictionary) ->dictionary(!) þeklinde argümanlarý verir:interface ve mac(dest)
   #print(option_dictionary["mac_address"]) --> HATA VERÝR.
                  |_____________________________Çünkü dictionary deðil bir tupledýr.

(user_inputs, arguments)=parse_object.parse_args()
                  |
                  |
           Zaten iþimiz yok.
   Kullanýcýnýn hangi argümanlarý girdiði
   deðil, ne deðerleri verdiði önemli.

print(user_inputs.interface)     --->kullanýcýnýn verdiði arayüzü yazar
print(user_inputs.mac_adress)    --->kullanýcýnýn verdiði mac adresi yazar

subprocess.call(["ifconfig",user_inputs.interface,"down"])
subprocess.call(["ifconfig", user_inputs.interface,"hw","ether",user_inputs.mac_adress])
subprocess.call(["ifconfig",user_inputs.interface,"up"])




KODU TERMÝNALDE YAZARKEN:
python my_mac_changer.py --interface eth0 --macadress 02:11:22:33:44:55
                          (veya -i)        (veya -m)


***parse_object.parse_args() 
   |
   (<Values at 0x7feadac07410: {'interface': 'eth0', 'mac_adress': '02:11:22:33:44:55'}>, [])

***user_inputs ---> bir instance
   |
   {'interface': 'eth0', 'mac_adress': '02:11:22:33:44:55'}

***arguments ---> bir list
   |
   []
   


















