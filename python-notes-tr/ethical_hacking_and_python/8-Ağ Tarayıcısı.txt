Kali ile birlikte gelen bir network tarayýcýsý var: netdiscover

"netdiscover --help" yazarsan nasýl kullanýlacaðýný görürsün.

192.168.6.0/24 --> aðdaki bütün IP'leri tarar.


netdiscover -r 10.0.2.1/24 --->aslýnda sonda 255'e kadar olabilir ama 1/24 bütün aðý sorgular.
			       Sanal kali linux için.
                               Ýlk 2 sonuç modemin sonucu,
                               3. sanal makinenin kendi sonucu olur genelde.
		               Sonuncusu da eðer baþka bir sanal makine açýksa onun sonucudur.
                               Sanal makine çünkü aðda (nat network) sanal makineler var.
YA DA
nmap 10.0.2.1/24






KOD
---
import scapy.all as scapy


   #1)ARP REQUEST OLUÞTURMAK - MAC ve IP adreslerini eþlemek için *!ARP BU IP KÝMDE DÝYE SORAR
   #2)BROADCAST - Ýsteðimiz að içindekini yerlere gidecek
   #3)RESPONSE


arp_request_packet = scapy.ARP() ---> ARP'yi kullanýrken girdiler vermem lazým. Örn: IP adresi
scapy.ls(scapy.ARP()) ---> scapy.ARP() ile ilgili bilgi almak için. help methodu gibi.
                           Ýçine hangi sýnýfla ilgili bilgi almak istiyorsak onu yazarýz.

  
   #Böyle çalýþtýrýlýnca: 
      hwtype     : XShortField                         = 1               (1)
      ptype      : XShortEnumField                     = 2048            (2048)
      hwlen      : FieldLenField                       = None            (None)
      plen       : FieldLenField                       = None            (None)
      op         : ShortEnumField                      = 1               (1)
      hwsrc      : MultipleTypeField                   = '08:00:27:68:aa:23' (None)
      psrc       : MultipleTypeField                   = '10.0.2.10'     (None)
      hwdst      : MultipleTypeField                   = '00:00:00:00:00:00' (None)
      pdst       : MultipleTypeField                   = '0.0.0.0'       (None)
    bunu verir. Bu demektir ki ARP instance'ý oluþtururken içeri verebileceðin inputlar bunlar. Yani ARP oluþtururken buradakilerden herhangi birini istediðin gibi *kwargs þeklinde yazabilirsin. Hangi IP hangi MAC adresiyle eþleþiyor bunu bulmak istiyoruz.
    Þu an bu paketi yollarsak default value 0.0.0.0 olduðu için diyecek ki "0.0.0.0 hanginize ait?" diye sorgulayacak. Öyle IP olmadýðýndan cevap alamayacak.
    Biz 10.0.2.1/24 arasýný yani bütün aðý arasýn istiyoruz. O yüzden pdst'yi (yukarýdaki input) 10.0.2.1/24 'e eþitleyeceðiz. Bunun için scapy.ARP içine (pdst="10.0.2.1/24") yazarýz.








BAÞTAN
------
import scapy.all as scapy

arp_request_packet = scapy.ARP(pdst="10.0.2.1/24") -> ARP'yi bu IP adresleri için yayýn yap.

broadcast_packet = scapy.Ether() 

scapy.ls(scapy.Ether())

   #Böyle çalýþtýrýlýnca:
    dst        : DestMACField                        = 'ff:ff:ff:ff:ff:ff' (None)
    src        : SourceMACField                      = '08:00:27:68:aa:23' (None)
    type       : XShortEnumField                     = 36864           (36864)
   dst-->gidilecek MAC adresi
   src-->gelen MAC adresi
   default dst deðeri 'ff:ff:ff:ff:ff:ff'. Default MAC adresidir. Her yere daðýt demek. Biz de buna yollamak istiyoruz. Çünkü bu broadcast yap demek. Modeme yolla her yere daðýlsýn. Hiçbir þey yapmasak bile dst deðeri buna eþit. Yine de deðiþir falan diye *kwargs vereceðiz.








BAÞTAN
------
import scapy.all as scapy
arp_request_packet = scapy.ARP(pdst="10.0.2.1/24")
broadcast_packet = scapy.Ether(dst="ff:ff:ff:ff:ff:ff") 
combined_packet = broadcast_packet/arp_request_packet-> 2 paketi al ve tek paket haline getir.
result=scapy.srp(combined_packet, timeout=1) -> timeout: Cevap verilmeyince bekleme, devam et.
              |
    sr olsaydý paketleri tek tek yollamak için
    srp ve sr'da cevaplar ve cevap verilmeyenler gelir
print(result)
 

Begin emission:
***Finished sending 256 packets.

Received 3 packets, got 3 answers, remaining 253 packets
(<Results: TCP:0 UDP:0 ICMP:0 Other:3>, <Unanswered: TCP:0 UDP:0 ICMP:0 Other:253>)
BUNU DÖNDÜRÜR
256 PAKET YOLLANDI, 3 TANESÝNDEN CEVAP ALINDI.









BAÞTAN
------
import scapy.all as scapy
arp_request_packet = scapy.ARP(pdst="10.0.2.1/24")
broadcast_packet = scapy.Ether(dst="ff:ff:ff:ff:ff:ff") 
combined_packet = broadcast_packet/arp_request_packet
(answered_list, unanswered_list)=scapy.srp(combined_packet, timeout=1)
   #print(list(answered_list)) ---> IP ve MAC adreslerini gösteren liste çýkartýr. 
                                    Artýk liste elinde.
answered_list.summary() ---> Daha düzenli.
 






DÜZENLEMEK
----------
import scapy.all as scapy
import optparse

def get_user_input():
    parse_object = optparse.OptionParser()
    parse_object.add_option("-i","--ipaddress", dest="ip_address",help="Enter IP Address")
    (user_input,arguments) = parse_object.parse_args()
    if not user_input.ip_address:
        print("Enter IP Address")
    return user_input

def scan_my_network(ip):
    arp_request_packet = scapy.ARP(pdst=ip)
    broadcast_packet = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    combined_packet = broadcast_packet/arp_request_packet
    (answered_list,unanswered_list) = scapy.srp(combined_packet,timeout=1)
    answered_list.summary()

user_ip_address = get_user_input()
scan_my_network(user_ip_address.ip_address)



***python3 ile de çalýþtýrabilirsin. 
   scapy'yi tekrar indirmen gerekebilir. --> pip3 install scapy