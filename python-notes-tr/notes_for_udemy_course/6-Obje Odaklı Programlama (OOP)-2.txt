ÖZEL METHODLAR (SPECIAL METHODS / DUNDER METHODS)
-------------------------------------------------
Ýlk özel method __init___ methoduydu.


class Fruits():
    def __init__(self,name,calories):
        self.name=name
        self.calories=calories

print(my_fruit)
|
<__main__.Fruits object at 0x00000020F2D1C128>

len(my_fruit)
|
HATA

print(my_list)    
|                   ----> HATA VERMEDÝ
['a', 'b', 3]

len(my_list)
|
3

SORU: Python'ýn builtin olan print ve len gibi fonksiyonlarý kendi sýnýfýmýzda nasýl kullanýrýz?

ÖZEL METHOD 2) __str__: Objenin, oluþturulacak olan instanceýn bir string gösterimi. Listeyi print ettirince listenin string gösterimini yazdýrýyor. 

class Fruits():
    def __init__(self,name,calories):
        self.name=name
        self.calories=calories
    def __str__(self):
        return "example"

my_fruit=Fruits("Banana",200)

print(my_fruit)
|
example


class Fruits():
    def __init__(self,name,calories):
        self.name=name
        self.calories=calories
    def __str__(self):
        return f"{self.name} has {self.calories} calories"

my_fruit=Fruits("Banana",200)

print(my_fruit)
|
Banana has 200 calories


ÖZEL METHOD 3) __len__

class Fruits():
    def __init__(self,name,calories):
        self.name=name
        self.calories=calories
    def __str__(self):
        return f"{self.name} has {self.calories} calories"
    def __len__(self):
        return len(self.name)  #return self.calories de diyebilirdin. Direkt 200'ü döndürürdü.

my_fruit=Fruits("Banana",200)

len(my_fruit)
|
6