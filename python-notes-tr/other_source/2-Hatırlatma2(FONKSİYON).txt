Metod, bir nesnenin içinde tanýmlanmýþ bir fonksiyondur.



%timeit math.exp(2)    | Bu komut iþlenen fonksiyonun süresini vs.    
%timeit üstel(2)       | gösterir. Sadece jupyter notebookta çalýþýr.





def f(x, y):
    return x+y, x-y

toplam, fark = f(3,5)
print("Toplam = {}, Fark = {}".format(toplam,fark))
|
Toplam = 8, Fark = -2




test = True
if test:
    def f1(): print(5)
else:
    def f2(): print(10)

yenifonk = f1
yenifonk()
5

yenifonk is f1
True





def kuvvetfonk(n):
    def fonk(x):
        return x**n
    return fonk


kare = kuvvetfonk(2)
kup = kuvvetfonk(3)
kare(5), kup(5)
|
(25, 125)
OR
kuvvetfonk(2)(5), kuvvetfonk(3)(5)
|
(25, 125)





def fntoplam(f, a, b):
    i = a
    toplam = 0
    while i<=b:
        toplam += f(i)
        i += 1
    return toplam

def f1(x):
    return 1.0/x

def f2(x):
    return 2.0**-x


fntoplam(f1, 1, 10)
2.9289682539682538

fntoplam(f2, 1, 10)
0.9990234375





def f(x):
    x[0] = -10
    print(x)
x = [1,2,3]
f(x)
|
[-10, 2, 3]

x
|
[-10, 2, 3]






def f(a,b,c):
    print("a = {}, b = {}, c = {}".format(a,b,c))

Konumla eþleþtirme: Fonksiyon tanýmýnda isimler hangi sýrada verildiyse, fonksiyon çaðrýsýnda verilen parametreler de ayný sýrayla atanýr.
f(3,2,1)
a = 3, b = 2, c = 1



Parametreleri eþleþtirmenin baþka bir yolu fonksiyon çaðrýsýnda parametre isimlerini kullanmaktýr. O zaman tanýmlanma sýrasýna sadýk kalmak gerekli olmaz. Bu yönteme isimle eþleþtirme denir.
f(c=4, b=1, a="asdf")
a = asdf, b = 1, c = 4



Konuma göre ve isme göre eþleþtirmeler karýþtýrýlabilir de. Bu durumda, öncelikle soldan saða doðru konumsal eþleþtirmeler yapýlýr, ardýndan isim eþleþtirmeleri yapýlýr.
f(1, c=3, b=2)
a = 1, b = 2, c = 3



Bir parametre konumla eþleþtirilmiþse, ardýndan ayrýca isimle eþleþtirmek hata oluþturur.
f(1, 2, b=9)
HATA



Öncelikli olarak konum eþleþtirmesi yapýldýðý için, ÝSÝM EÞLEÞTÝRMELERÝNDEN SONRA ÝSÝMSÝZ BÝR PARAMETRE VERÝLEMEZ.
f(1, b=2, 3)
HATA







def f(a, b=2, c=3):
    print("a = {}, b = {}, c = {}".format(a,b,c))

f(1)            # b ve c varsayýlan deðerde
f(a = 4)        # b ve c varsayýlan deðerde
f(1,7)          # c varsayýlan deðerde
f(1,"hede",6)   # hepsine yeni deðer
f(1,c=8)        # b varsayýlan deðerde






def f(*par):
    print("Parametreler:", par)

f()                               # hiç parametre yok, boþ tuple
f(3)                              # tek parametre, tekli tuple
f(45, 3-4j, "merhaba", [1,2,3])   # dörtlü tuple


Fonksiyonun tanýmýnda *par kullanmakla bütün parametrelerin par isimli bir çokuza toplanmasýný saðladýk. Bu yönteme parametre paketleme (argument packing) diyoruz.






def f( *pargs, **kwargs ):
    print(pargs)    # Konum eþleþtirmeli parametreler çokuzu
    print(kwargs)   # Ýsim eþleþtirmeli parametreler sözlüðü

f()                            f(1, 2, a = "xyz", b = 3.14)
()                             (1, 2)
{}                             {'a': 'xyz', 'b': 3.14}


Böyle tanýmlanmýþ bir fonksiyon hem konum hem de isim eþleþtirmeli parametrelerle çalýþabilir. Birçok hazýr kütüphanede, böyle genel bir arayüzle tanýmlanmýþ fonksiyonlar bulunur.








def f(a,b,c,d):
    print(d,c,b,a)

x = (1,5,9,13)
f(x)
HATA

Çünkü 4 parametre bekleyen fonksiyona tek parametre verdik.
Eðer fonksiyon çaðrýsýný f(*x) þeklinde yazarsak x‘in elemanlarý tek tek alýnýp parametre olarak f‘ye verilir ve sorunsuzca çalýþýr. Bu iþleme parametre çözme (argument unpacking) deniyor.

Parametreler baþka bir sýralý veri tipinde (liste, dize) saklanýyorsa da ayný iþlem geçerli olur.
f(*[1,2,3,4])
f(*"xyzt")
|
4 3 2 1
t z y x





Fonksiyonda parametre isimlerini a, b, c, d olarak tanýmlamýþtýk. Bu isimleri kullanarak isim eþleþtirmesi yapmak isteyebiliriz. Burada parametre çözme iþlemi uygularken çokuz kullanamayýz çünkü çokuzda parametre isimleri mevcut deðil, sadece deðerler mevcut. Bu durumda parametre çözmeyi ** notasyonu kullanarak, parametre isimlerini ve deðerlerini içeren bir sözlükle yapmalýyýz.

D = {'b':2, 'd':4, 'a':1, 'c':3}
f(**D)
|
4 3 2 1





Ýki yaklaþýmý birleþtirmek de mümkün:

f( *(1,2), **{'c':"merhaba", 'd':[5,6]} )
|
[5, 6] merhaba 2 1

f(*[2,3], **{"d":"selam","c":23})
|
selam 23 3 2

