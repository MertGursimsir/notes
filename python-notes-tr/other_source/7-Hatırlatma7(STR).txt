str([1,2,3])
|
'[1, 2, 3]'




print( 'Dedim ki: "Gel!"' )
|
Dedim ki: "Gel!"



print("Ali'ye dedim ki: \"Gel!\"")
|
Ali'ye dedim ki: "Gel!"





Üç týrnak (""" veya ''') kullanarak birkaç satýra yayýlan bir dize yaratabiliriz. Yaptýðýmýz kaydýrmalar, satýrbaþlarý, boþ satýrlar dizenin parçasý olarak kaydedilir. Bu tür dizeler özellikle fonksiyonlardaki belge dizelerinde (docstring) çok kullanýlýr.

s = """abcç
    def
gðhýi"""
print(s)
|
abcç
    def
gðhýi



help(str.capitalize)


s = "Python Programlamaya Giriþ"
s.startswith("Pyth"), s.endswith("xyz")
|
(True, False)




s = "Pijamalý hasta yaðýz þoföre çabucak güvendi."

print("s.upper():", s.upper())   # Hepsini büyük harfe çevir.
print("s.lower():", s.lower())   # Hepsini küçük harfe çevir.
print("s.capitalize():", s.capitalize())   # Sadece cümlelerin ilk harfini büyük yap. 
print("s.swapcase():", s.swapcase())   # Büyük harfleri küçüðe, küçükleri büyüðe çevir.
print("s.title():", s.title())   # Her kelimenin ilk harfini büyük yap.
|
s.upper(): PIJAMALI HASTA YAÐIZ ÞOFÖRE ÇABUCAK GÜVENDI.
s.lower(): pijamalý hasta yaðýz þoföre çabucak güvendi.
s.capitalize(): Pijamalý hasta yaðýz þoföre çabucak güvendi.
s.swapcase(): pIJAMALI HASTA YAÐIZ ÞOFÖRE ÇABUCAK GÜVENDI.
s.title(): Pijamalý Hasta Yaðýz Þoföre Çabucak Güvendi.



"ABCDABCAAABC".count("ABC")
|
3



Sadece örtüþmeyen alt dizeler sayýlýr. Sözgeliþi, "AAAAA" dizesinin içinde, örtüþmeleri sayarsak "AA" altdizesi 5 kere mevcuttur, ama count 2 sonucunu verir.

"AAAAA".count("AA")
|
2




s = "ABRAKADABRA"
s.find("RA")
|
2


s.find("XYZ")
|
-1


Tersten
-------
s.rfind("RA")
|
9




index ile find ayný iþi yapar. Tek farklarý, aranan alt dize bulunamayýnca index‘in bir hata iþareti ("ValueError") vermesidir. Hata yakalamaya dayalý programlarda tercih edilir.


s.index("RA")
|
2

s.index("XYZ")
|
HATA


*rindex  de tersten baþlar.




"".join(["A","67","B","0.15"])    # yanyana yapýþtýrýr
|
'A67B0.15'



" ".join(["A","67","B","0.15"])   # araya bir boþluk koyarak yapýþtýrýr
|
'A 67 B 0.15'



"-*-".join(["A","67","B","0.15"]) # araya -*- koyarak yapýþtýr
|
'A-*-67-*-B-*-0.15'




lstrip , rstrip , strip
-----------------------
Bu metodlar bir dizenin sol ve/veya sað tarafýndaki boþ karakterleri (boþluk, kaydýrma \t, satýrbaþý \n) kaldýrýr. lstrip soldaki, rstrip saðdaki, strip ise her iki yandaki boþluklarý temizler. Bu metodlar özellikle bir dosya satýr satýr okunurken yararlý olur.




s = """
        ferah  ferah   
"""
s
|
'\n        ferah  ferah   \n'



s.lstrip()
|
'ferah  ferah   \n'

s.rstrip()
|
'\n        ferah  ferah'

s.strip()
|
'ferah  ferah'




s = "eskiþehir'de eski bir evde eski bir kapý"
s.replace("eski", "yeni")
|
"yeniþehir'de yeni bir evde yeni bir kapý"


s.replace("eski", "yeni", 2)
|
"yeniþehir'de yeni bir evde eski bir kapý"





split metodu bir dizedeki kelimeleri belli yerlerden (varsayýlan olarak boþluk karakterlerinden) böler ve ortaya çýkan bölümlerden oluþan bir dize listesi verir. Fazlalýk boþluklar hesaba katýlmaz.

"   kedi köpek   balýk    kuþ   ".split()
|
['kedi', 'köpek', 'balýk', 'kuþ']



Boþluk yerine baþka bir ayýrýcý kullanýlabilir. Ayrýcý istenilen sayýda karakterden oluþabilir.

"1,2,3,4,5,6".split(",")
|
['1', '2', '3', '4', '5', '6']



Sadece belli sayýda bölme yapmak da mümkündür. Arta kalan kýsým tek bir dizede toplanýr.

"   kedi köpek   balýk    kuþ   ".split(maxsplit=2)
|
['kedi', 'köpek', 'balýk    kuþ   ']



Soldan deðil saðdan baþlayarak ayýrmamýz gerekirse rsplit metodunu kullanýrýz.

"   kedi köpek   balýk    kuþ   ".rsplit(maxsplit=2)
|
['   kedi köpek', 'balýk', 'kuþ']



Birden fazla satýr barýndýran bir dizeyi satýr sýnýrlarýndan bölmek için splitlines metodu kullanýlabilir.

s = """abcç
defgð
hýi
jkl"""
s.splitlines()
|
['abcç', 'defgð', 'hýi', 'jkl']


splitlines metodu sadece satýrbaþý ("\n") ile deðil, "\r", "\v", "\f", ve satýr sonu sayýlan baþka birkaç karakter ile de böler. Ayrýca, split‘ten farklý olarak dize sonundaki "\n" karakterini de göz ardý eder. Bir dosyanýn içeriðini bütün olarak bir dizeye yüklediyseniz, onu satýrlara bölmek için en uygunu splitlines kullanmaktýr.